# Makefile.in generated by automake 1.16.2 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2020 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# *.gt.* designates the tagset being used.
# At the end of the makefile, there is support for automatic compilation of
# other tagsets, given that the proper tagset relabeling files are defined,
# and that the target files are defined as part of the 'all' target.
#
# Filenames are built as follows:
# basictype-application-tagset-normativity[-dialect].fsttype
#
# 'application' is not specified for the regular/default morphological
# analysis/generation.
#
# Examples:
# analyser-oahpa-gt-desc.hfst
# generator-apertium-apertium-norm_single.hfst
# analyser-gt-desc.xfst
#
# Full details regarding transducer filenames can be found at:
#
# https://giellalt.uit.no/infra/infraremake/TransducerNamesInTheNewInfra.html

####### Automake targets: ########

# This file is included by $GTLANG/../giella-core/am-shared/src-dir-include.am, which is
# included by $GTLANG/src/Makefile.am. All file references are relative to
# that Makefile.am.

# Include file for building fst's for alternative writing systems

# Include file for building fst's for alternative writing systems

# Include file for building fst's for alternative orthographies

# Include file for building fst's for alternative writing systems

####### HFST build rules: ########

#####################################################
########## Lookup and composition adaption ##########
#####################################################

# Due to the way Xerox does lookup, we need to inverse fst's when used with the
# lookup tool, but not when doing composition. This is important to get correct
# e.g. when testing rewrite rules. Hfst does not need any special treatment.

####### HFST build rules: ########

###########################################
########## XFScript build rules. ##########
###########################################

# *.gt.* designates the tagset being used.
# At the end of the makefile, there is support for automatic compilation of
# other tagsets, given that the proper tagset relabeling files are defined,
# and that the target files are defined as part of the 'all' target.
#
# Filenames are built as follows:
# basictype-application-tagset-normativity[-dialect].fsttype
#
# 'application' is not specified for the regular/default morphological
# analysis/generation.
#
# Examples:
# analyser-oahpa-gt-desc.hfst
# generator-apertium-apertium-norm_single.hfst
# analyser-gt-desc.xfst
#
# Full details regarding transducer filenames can be found at:
#
# https://giellalt.uit.no/infra/infraremake/TransducerNamesInTheNewInfra.html

#### Tailored silent output text: ####

#### HFST tools
# Tools not yet covered by this file:
#
# hfst-determinize
# hfst-fst2strings
# hfst-info
# hfst-minus
# hfst-multiply
# hfst-pair-test
# hfst-pmatch
# hfst-prune-alphabet
# hfst-push-weights
# hfst-remove-epsilons
# hfst-shuffle
# hfst-subtract
# hfst-summarize
# hfst-tokenize


am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/giella-sms
pkgincludedir = $(includedir)/giella-sms
pkglibdir = $(libdir)/giella-sms
pkglibexecdir = $(libexecdir)/giella-sms
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-apple-darwin19.4.0
host_triplet = x86_64-apple-darwin19.4.0

#### Local modifications in *fst processing: ####
####
#### Copy the fallback targets, and rename them to the desired targets. Then:
#### Replace the 'cp' command (Xerox) / Prepend the hfst-invert command (Hfst -
#### remember to move the $<) with whatever you need to complete
#### the processing to get the final target transducer.
#### Remember to add the dependencies as well.
#### Also make sure that HFST and Xerox processing are the same.
####
#### If you add new transducers to be built, you need to add them to the
#### relevant variable, e.g.:
####
#### if CAN_HFST
#### GT_GENERATORS+=generator-oahpa-gt-norm.hfst
#### endif
####
#### NB!!!! The HFST targets should get a hyphen after 'analyser'/'generator'
#### respectively, to make the local targets minimally different from and
#### slightly more specific than the fallback targets. This is to avoid warnings
#### about duplicate targets. That is, the local targets should looke like:
####
#### analyser-%.hfst: analyser-%.tmp.hfst
#### generator-%.hfst: generator-%.tmp.hfst

##################################################################
#### BEGIN: Add local processing instructions BELOW this line ####
##################################################################

########################################################
#### Add language-specific transducer targets here: ####

#### Xerox transducers:
#am__append_1 = 
#am__append_2 = 

#### HFST transducers
am__append_3 = 
am__append_4 = generator-dict-gt-norm.hfst

#### FOMA transducers
#am__append_5 = 
#am__append_6 = 

# Add other targets that should be built but not installed,
# such as the URL analyser, to the GT_FSTs_NO_INSTALL variable:
am__append_7 = analyser-url-gt-desc.hfst
#am__append_8 = analyser-url-gt-desc.xfst
#am__append_9 = analyser-url-gt-desc.foma

##### BEGIN Hfst target list #####

# Always build the raw generator if hfst is enabled:
am__append_10 = generator-raw-gt-desc.hfst analyser-raw-gt-desc.hfst
am__append_11 = analyser-gt-desc.hfstol \
			  analyser-gt-norm.hfstol

am__append_12 = generator-gt-desc.hfstol \
			   generator-gt-norm.hfstol 

#am__append_13 = analyser-raw-gt-glossing.hfst
#am__append_14 = analyser-gt-glossing.hfstol
#am__append_15 = generator-gt-glossing.hfstol
am__append_16 = morpher-gt-desc.hfstol

##### END Hfst target list #####

##### BEGIN Xerox target list #####

# Always build the raw analsyer if Xerox is enabled:
#am__append_17 = analyser-raw-gt-desc.xfst
#am__append_18 = analyser-gt-desc.xfst \
#			  analyser-gt-norm.xfst

#am__append_19 = generator-gt-desc.xfst \
#			   generator-gt-norm.xfst

##am__append_20 = analyser-raw-gt-glossing.xfst
##am__append_21 = analyser-gt-glossing.xfst
##am__append_22 = generator-gt-glossing.xfst
#am__append_23 = morpher-gt-desc.xfst

##### END Xerox target list #####

##### BEGIN Foma target list #####

# Always build the raw analsyer if Xerox is enabled:
#am__append_24 = analyser-raw-gt-desc.foma
#am__append_25 = analyser-gt-desc.foma \
#			  analyser-gt-norm.foma

#am__append_26 = generator-gt-desc.foma \
#			   generator-gt-norm.foma

##am__append_27 = analyser-raw-gt-glossing.foma
##am__append_28 = analyser-gt-glossing.foma
##am__append_29 = generator-gt-glossing.foma
#am__append_30 = morpher-gt-desc.foma
am__append_31 = analyser-dict-gt-desc.hfstol \
				   analyser-dict-gt-desc-mobile.hfstol

am__append_32 = generator-dict-gt-norm.hfstol
#am__append_33 = analyser-dict-gt-desc.xfst \
#				   analyser-dict-gt-desc-mobile.xfst

#am__append_34 = generator-dict-gt-norm.xfst
#am__append_35 = analyser-dict-gt-desc.foma \
#				   analyser-dict-gt-desc-mobile.foma

#am__append_36 = generator-dict-gt-norm.foma

##### BEGIN Hfst target list #####
am__append_37 = analyser-disamb-gt-desc.hfstol
am__append_38 = analyser-pmatchdisamb-gt-desc.hfst

##### END Hfst target list #####

##### BEGIN Xerox target list #####
#am__append_39 = analyser-disamb-gt-desc.xfst

##### END Xerox target list #####

##### BEGIN Foma target list #####
#am__append_40 = analyser-disamb-gt-desc.foma

##################################################
####### Automake targets: ########
#am__append_41 = analyser-oahpa-gt-norm.hfstol
#am__append_42 = generator-oahpa-gt-norm.hfstol \
#					$(OAHPA_DIALECT_TARGETS_HFST)

##am__append_43 = analyser-oahpa-gt-norm.xfst
##am__append_44 = generator-oahpa-gt-norm.xfst \
##					$(OAHPA_DIALECT_TARGETS_XFST)

##am__append_45 = analyser-oahpa-gt-norm.foma
##am__append_46 = generator-oahpa-gt-norm.foma \
##					$(OAHPA_DIALECT_TARGETS_FOMA)

#am__append_47 = analyser-oahpa-gt-error.hfstol
#am__append_48 = analyser-raw-gt-error.hfst
##am__append_49 = analyser-oahpa-gt-error.xfst
##am__append_50 = analyser-oahpa-gt-error.foma
#am__append_51 = analyser-oahpa-gt-downcaseerror.hfstol
##am__append_52 = analyser-oahpa-gt-downcaseerror.xfst
##am__append_53 = analyser-oahpa-gt-downcaseerror.foma

##### BEGIN Hfst target list #####
#am__append_54 = $(addsuffix .hfstol,$(AREA_ANALYSERS_TMP))
#am__append_55 = $(addsuffix .hfstol,$(AREA_GENERATORS_TMP))
##### END Hfst target list #####

##### BEGIN Xerox target list #####
##am__append_56 = $(addsuffix .xfst,$(AREA_ANALYSERS_TMP))
##am__append_57 = $(addsuffix .xfst,$(AREA_GENERATORS_TMP))
##### END Xerox target list #####

##### BEGIN Foma target list #####
##am__append_58 = $(addsuffix .foma,$(AREA_ANALYSERS_TMP))
##am__append_59 = $(addsuffix .foma,$(AREA_GENERATORS_TMP))

##### BEGIN Hfst target list #####
#am__append_60 = $(addsuffix .hfstol,$(ALT_WS_ANALYSERS_TMP))
#am__append_61 = $(addsuffix .hfstol,$(ALT_WS_GENERATORS_TMP))
##### END Hfst target list #####

##### BEGIN Xerox target list #####
##am__append_62 = $(addsuffix .xfst,$(ALT_WS_ANALYSERS_TMP))
##am__append_63 = $(addsuffix .xfst,$(ALT_WS_GENERATORS_TMP))
##### END Xerox target list #####

##### BEGIN Foma target list #####
##am__append_64 = $(addsuffix .foma,$(ALT_WS_ANALYSERS_TMP))
##am__append_65 = $(addsuffix .foma,$(ALT_WS_GENERATORS_TMP))

##### BEGIN Hfst target list #####
#am__append_66 = $(addsuffix .hfstol,$(ALT_ORTH_ANALYSERS_TMP))
#am__append_67 = $(addsuffix .hfstol,$(ALT_ORTH_GENERATORS_TMP))
##### END Hfst target list #####

##### BEGIN Xerox target list #####
##am__append_68 = $(addsuffix .xfst,$(ALT_ORTH_ANALYSERS_TMP))
##am__append_69 = $(addsuffix .xfst,$(ALT_ORTH_GENERATORS_TMP))
##### END Xerox target list #####

##### BEGIN Foma target list #####
##am__append_70 = $(addsuffix .foma,$(ALT_ORTH_ANALYSERS_TMP))
##am__append_71 = $(addsuffix .foma,$(ALT_ORTH_GENERATORS_TMP))

##### BEGIN Hfst target list #####
#am__append_72 = $(addsuffix .hfstol,$(DIAL_ANALYSERS_TMP))
#am__append_73 = $(addsuffix .hfstol,$(DIAL_GENERATORS_TMP))
##### END Hfst target list #####

##### BEGIN Xerox target list #####
##am__append_74 = $(addsuffix .xfst,$(DIAL_ANALYSERS_TMP))
##am__append_75 = $(addsuffix .xfst,$(DIAL_GENERATORS_TMP))
##### END Xerox target list #####

##### BEGIN Foma target list #####
##am__append_76 = $(addsuffix .foma,$(DIAL_ANALYSERS_TMP))
##am__append_77 = $(addsuffix .foma,$(DIAL_GENERATORS_TMP))
#am__append_78 = analyser-gramcheck-gt-desc.hfstol
#am__append_79 = generator-gramcheck-gt-norm.hfstol
subdir = src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_check_gnu_make.m4 \
	$(top_srcdir)/m4/ax_compare_version.m4 \
	$(top_srcdir)/m4/ax_python_module.m4 \
	$(top_srcdir)/m4/giella-config-files.m4 \
	$(top_srcdir)/m4/giella-macros.m4 $(top_srcdir)/m4/hfst.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \
	ctags-recursive dvi-recursive html-recursive info-recursive \
	install-data-recursive install-dvi-recursive \
	install-exec-recursive install-html-recursive \
	install-info-recursive install-pdf-recursive \
	install-ps-recursive install-recursive installcheck-recursive \
	installdirs-recursive pdf-recursive ps-recursive \
	tags-recursive uninstall-recursive
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(hfstdatadir)"
DATA = $(hfstdata_DATA) $(noinst_DATA)
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
am__recursive_targets = \
  $(RECURSIVE_TARGETS) \
  $(RECURSIVE_CLEAN_TARGETS) \
  $(am__extra_recursive_targets)
AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \
	distdir distdir-am
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
am__DIST_COMMON = $(srcdir)/Makefile.in \
	$(top_srcdir)/../giella-core/am-shared/hfst-format-include.am \
	$(top_srcdir)/../giella-core/am-shared/lookup-include.am \
	$(top_srcdir)/../giella-core/am-shared/regex-include.am \
	$(top_srcdir)/../giella-core/am-shared/silent_build-include.am \
	$(top_srcdir)/../giella-core/am-shared/src-dir-include.am \
	$(top_srcdir)/../giella-core/am-shared/src_alt_orth-include.am \
	$(top_srcdir)/../giella-core/am-shared/src_alt_ws-include.am \
	$(top_srcdir)/../giella-core/am-shared/src_area-include.am \
	$(top_srcdir)/../giella-core/am-shared/src_dialects-include.am \
	$(top_srcdir)/../giella-core/am-shared/src_dictionary-include.am \
	$(top_srcdir)/../giella-core/am-shared/src_disamb-include.am \
	$(top_srcdir)/../giella-core/am-shared/src_gramcheck-include.am \
	$(top_srcdir)/../giella-core/am-shared/src_oahpa-include.am \
	$(top_srcdir)/../giella-core/am-shared/xfscript-include.am \
	README
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
ACLOCAL = ${SHELL} /Users/rueter/Documents/Github/giellalt/lang-sms/build-aux/missing aclocal-1.16
ALT_ORTHS = 
ALT_WSS = 
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 0
AREAS = 
AUTOCONF = ${SHELL} /Users/rueter/Documents/Github/giellalt/lang-sms/build-aux/missing autoconf
AUTOHEADER = ${SHELL} /Users/rueter/Documents/Github/giellalt/lang-sms/build-aux/missing autoheader
AUTOMAKE = ${SHELL} /Users/rueter/Documents/Github/giellalt/lang-sms/build-aux/missing automake-1.16
AWK = gawk
BC = /usr/bin/bc
CGFLOOKUP = /usr/local/bin/cgflookup
CG_MWESPLIT = /usr/local/bin/cg-mwesplit
CG_RELABEL = /usr/local/bin/cg-relabel
CYGPATH_W = echo
CYGWINJAVAPATH = echo
DEFAULT_ORTH = 
DEFAULT_WS = Latn
DEFS = -DPACKAGE_NAME=\"Giella\ sms\" -DPACKAGE_TARNAME=\"giella-sms\" -DPACKAGE_VERSION=\"0.2.0\" -DPACKAGE_STRING=\"Giella\ sms\ 0.2.0\" -DPACKAGE_BUGREPORT=\"feedback@divvun.no\" -DPACKAGE_URL=\"http://divvun.no\" -DPACKAGE=\"giella-sms\" -DVERSION=\"0.2.0\"
DIALECTS = main
DIFFTOOL = /usr/bin/opendiff
DIVVUN_VALIDATE_SUGGEST = /usr/local/bin/divvun-validate-suggest
ECHO_C = \c
ECHO_N = 
ECHO_T = 
FLOOKUP = /usr/local/bin/flookup
FOMA = /usr/local/bin/foma
FORREST = /Users/rueter/Documents/forrest/bin/forrest
GAWK = /opt/local/bin/gawk
GIELLA_CORE = /Users/rueter/Documents/Github/giellalt/giella-core
GIELLA_CORE_VERSION = /Users/rueter/Documents/Github/giellalt/giella-core/scripts/gt-version.sh
GIELLA_LIBS = /Users/rueter/Documents/Github/giellalt/giella-libs
GIELLA_SHARED = /Users/rueter/Documents/Github/giellalt/giella-shared
GLANG = sms
GLANG2 = sms
GLANGUAGE = Skolt Sami
GTCORE = /Users/rueter/Documents/Github/giellalt/giella-core
GTCORESH = /Users/rueter/Documents/Github/giellalt/giella-core/scripts/gt-core.sh
GTLANG = sms
GTLANG2 = sms
GTLANGUAGE = Skolt Sami
GZIP = /usr/bin/gzip
HFST_COMPOSE = /usr/local/bin/hfst-compose
HFST_COMPOSE_INTERSECT = /usr/local/bin/hfst-compose-intersect
HFST_CONCATENATE = /usr/local/bin/hfst-concatenate
HFST_CONJUNCT = /usr/local/bin/hfst-conjunct
HFST_DETERMINIZE = /usr/local/bin/hfst-determinize
HFST_DISJUNCT = /usr/local/bin/hfst-disjunct
HFST_FOMA = false
HFST_FORMAT_NAME = openfst-tropical
HFST_FST2FST = /usr/local/bin/hfst-fst2fst
HFST_FST2STRINGS = /usr/local/bin/hfst-fst2strings
HFST_FST2TXT = /usr/local/bin/hfst-fst2txt
HFST_INFO = /usr/local/bin/hfst-info
HFST_INTERSECT = /usr/local/bin/hfst-intersect
HFST_INVERT = /usr/local/bin/hfst-invert
HFST_LEXC = /usr/local/bin/hfst-lexc
HFST_LOOKUP = /usr/local/bin/hfst-lookup
HFST_MINIMIZE = /usr/local/bin/hfst-minimize
HFST_MINIMIZE_SPELLER = /usr/local/bin/hfst-remove-epsilons $(HFST_FLAGS)                                          | /usr/local/bin/hfst-determinize --encode-weights $(HFST_FLAGS)                                          | /usr/local/bin/hfst-minimize    --encode-weights $(HFST_FLAGS) 
HFST_MINUS = /usr/local/bin/hfst-minus
HFST_MULTIPLY = /usr/local/bin/hfst-multiply
HFST_NAME = /usr/local/bin/hfst-name
HFST_OPTIMIZED_LOOKUP = /usr/local/bin/hfst-optimized-lookup
HFST_OSPELL = /usr/local/bin/hfst-ospell
HFST_PAIR_TEST = /usr/local/bin/hfst-pair-test
HFST_PMATCH2FST = /usr/local/bin/hfst-pmatch2fst
HFST_PROC = /usr/local/bin/hfst-proc
HFST_PROJECT = /usr/local/bin/hfst-project
HFST_PRUNE_ALPHABET = /usr/local/bin/hfst-prune-alphabet
HFST_PUSH_WEIGHTS = /usr/local/bin/hfst-push-weights
HFST_REGEXP2FST = /usr/local/bin/hfst-regexp2fst
HFST_REMOVE_EPSILONS = /usr/local/bin/hfst-remove-epsilons
HFST_REPEAT = /usr/local/bin/hfst-repeat
HFST_REVERSE = /usr/local/bin/hfst-reverse
HFST_REWEIGHT = /usr/local/bin/hfst-reweight
HFST_SPLIT = /usr/local/bin/hfst-split
HFST_STRINGS2FST = /usr/local/bin/hfst-strings2fst
HFST_SUBSTITUTE = /usr/local/bin/hfst-substitute
HFST_SUBTRACT = /usr/local/bin/hfst-subtract
HFST_SUMMARIZE = /usr/local/bin/hfst-summarize
HFST_TOKENISE = /usr/local/bin/hfst-tokenize
HFST_TWOLC = /usr/local/bin/hfst-twolc
HFST_TXT2FST = /usr/local/bin/hfst-txt2fst
HFST_XFST = /usr/local/bin/hfst-xfst
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
JV = /usr/bin/java
LEXC = /usr/local/bin/lexc
LEXREF_IN_XFSCRIPT = 
LIBOBJS = 
LIBS = 
LOOKUP = /usr/local/bin/lookup
LTLIBOBJS = 
MAKEINFO = ${SHELL} /Users/rueter/Documents/Github/giellalt/lang-sms/build-aux/missing makeinfo
MKDIR_P = ../build-aux/install-sh -c -d
NO_PHONOLOGY = 
PACKAGE = giella-sms
PACKAGE_BUGREPORT = feedback@divvun.no
PACKAGE_NAME = Giella sms
PACKAGE_STRING = Giella sms 0.2.0
PACKAGE_TARNAME = giella-sms
PACKAGE_URL = http://divvun.no
PACKAGE_VERSION = 0.2.0
PATGEN = false
PATH_SEPARATOR = :
PERL = /opt/local/bin/perl
PRINTF = /usr/bin/printf
PYTHON = /opt/local/bin/python
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_PLATFORM = darwin
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 3.8
RSYNC = /usr/bin/rsync
SAXON = false
SAXONJAR = /opt/local/share/java/saxon9he.jar
SEE = 
SET_MAKE = 
SHELL = /bin/sh
SPELLERVERSION = 0.1
STRIP = 
TAR = /usr/bin/tar
TWOLC = /usr/local/bin/twolc
VERSION = 0.2.0
VISLCG3 = /usr/local/bin/vislcg3
VISLCG3_COMP = /usr/local/bin/cg-comp
VOIKKOGC = false
VOIKKOHYPHENATE = false
VOIKKOSPELL = false
VOIKKOVFSTC = false
WGET = /opt/local/bin/wget
XFST = /usr/local/bin/xfst
XZ = /opt/local/bin/xz
ZIP = /usr/bin/zip
abs_builddir = /Users/rueter/Documents/Github/giellalt/lang-sms/src
abs_srcdir = /Users/rueter/Documents/Github/giellalt/lang-sms/src
abs_top_builddir = /Users/rueter/Documents/Github/giellalt/lang-sms
abs_top_srcdir = /Users/rueter/Documents/Github/giellalt/lang-sms
am__leading_dot = .
am__tar = tar --format=posix -chf - "$$tardir"
am__untar = tar -xf -
bindir = ${exec_prefix}/bin
build = x86_64-apple-darwin19.4.0
build_alias = 
build_cpu = x86_64
build_os = darwin19.4.0
build_vendor = apple
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-apple-darwin19.4.0
host_alias = 
host_cpu = x86_64
host_os = darwin19.4.0
host_vendor = apple
htmldir = ${docdir}
ifGNUmake = 
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /Users/rueter/Documents/Github/giellalt/lang-sms/build-aux/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
pkgpyexecdir = ${pyexecdir}/giella-sms
pkgpythondir = ${pythondir}/giella-sms
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
pyexecdir = ${exec_prefix}/lib/python3.8/site-packages
pythondir = ${prefix}/lib/python3.8/site-packages
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..

# always build . last here, and tagsets have to be built after morphology
SUBDIRS = fst filters phonetics hyphenation orthography cg3 transcriptions tagsets .

####### Automake targets: ########

# Define target variables first, before assigning to them:
GT_ANALYSERS = $(am__append_1) $(am__append_3) $(am__append_5) \
	$(am__append_11) $(am__append_14) $(am__append_16) \
	$(am__append_18) $(am__append_21) $(am__append_23) \
	$(am__append_25) $(am__append_28) $(am__append_30) \
	$(am__append_31) $(am__append_33) $(am__append_35) \
	$(am__append_37) $(am__append_38) $(am__append_39) \
	$(am__append_40) $(am__append_41) $(am__append_43) \
	$(am__append_45) $(am__append_47) $(am__append_49) \
	$(am__append_50) $(am__append_51) $(am__append_52) \
	$(am__append_53) $(am__append_78)
GT_GENERATORS = $(am__append_2) $(am__append_4) $(am__append_6) \
	$(am__append_12) $(am__append_15) $(am__append_19) \
	$(am__append_22) $(am__append_26) $(am__append_29) \
	$(am__append_32) $(am__append_34) $(am__append_36) \
	$(am__append_42) $(am__append_44) $(am__append_46) \
	$(am__append_79)

# The following two variables are used to force Make to choose one of two
# alternative paths to reach the same end target for pattern rules, where the
# wrong path builds on hfstol files all the way. This is overridden by
# specifying the non-hfstol intermediate files as non-intalling targets.
GT_RAW = $(am__append_10) $(am__append_13) $(am__append_17) \
	$(am__append_20) $(am__append_24) $(am__append_27) \
	$(am__append_48)

# Variable to hold intermediate *.hfst targets to force make to go via them
# before building *.hfstol target.
GT_FSTs_NO_INSTALL = $(subst hfstol,hfst,$(filter %.hfstol, \
	$(GT_ANALYSERS) $(GT_GENERATORS))) $(am__append_7) \
	$(am__append_8) $(am__append_9)
#COMPOSE_INTERSECT_FLAG = --fast
#GLT_DOWNCASE_FILTER = 

##### END Foma target list #####

### BEGIN: Case handlign conditional:
GLT_DOWNCASE_FILTER = orthography/downcase-derived_proper-strings.compose.%
#GLT_DOWNCASE_COMPOSE = 
GLT_DOWNCASE_COMPOSE = .o. @\"orthography/downcase-derived_proper-strings.compose.$*\"
#GLT_DOWNCASE_COMPOSE_DEF = 
GLT_DOWNCASE_COMPOSE_DEF = .o. @\"orthography/downcase-derived_proper-strings.compose.$$*\"
### END: Case handlign conditional:
hfstdatadir = $(datadir)/giella/$(GTLANG)
hfstdata_DATA = $(GT_ANALYSERS)       \
			  $(GT_GENERATORS)      \
			  $(AREA_ANALYSERS)     \
			  $(AREA_GENERATORS)    \
			  $(DIAL_ANALYSERS)     \
			  $(DIAL_GENERATORS)    \
			  $(ALT_WS_ANALYSERS)   \
			  $(ALT_WS_GENERATORS)  \
			  $(ALT_ORTH_ANALYSERS) \
			  $(ALT_ORTH_GENERATORS)

noinst_DATA = $(GT_RAW)              \
			$(GT_FSTs_NO_INSTALL)


# Define the dialect targets using list of dialects defined in configure.ac:
OAHPA_DIALECT_TARGETS = $(addprefix generator-oahpa-gt-norm-dial_,$(DIALECTS))
OAHPA_DIALECT_TARGETS_HFST = $(addsuffix .hfstol,$(OAHPA_DIALECT_TARGETS))
OAHPA_DIALECT_TARGETS_XFST = $(addsuffix .xfst,$(OAHPA_DIALECT_TARGETS))
OAHPA_DIALECT_TARGETS_FOMA = $(addsuffix .foma,$(OAHPA_DIALECT_TARGETS))

####### Automake targets: ########
# IFF different areas are defined, compute target file names for area
# variants (normative fst's only):

# Define temporary variables to build final target filenames from:
#ALL_AREA_BASENAME_ANALYSERS = $(sort $(basename $(GT_ANALYSERS)))
#NORM_AREA_BASENAME_ANALYSERS = $(shell echo $(ALL_AREA_BASENAME_ANALYSERS) \
#							| tr ' ' '\n' | grep 'norm' )

#AREA_ANALYSERS_TMP = $(shell for ll in $(NORM_AREA_BASENAME_ANALYSERS); do\
#    for ld in $(AREAS); do\
#        echo "$${ll}_$$ld" ;\
#    done ;\
#done)

#ALL_AREA_BASENAME_GENERATORS = $(sort $(basename $(GT_GENERATORS)))
#NORM_AREA_BASENAME_GENERATORS = $(shell echo $(ALL_AREA_BASENAME_GENERATORS) \
#							| tr ' ' '\n' | grep 'norm' )

#AREA_GENERATORS_TMP = $(shell for ll in $(NORM_AREA_BASENAME_GENERATORS); do\
#    for ld in $(AREAS); do\
#        echo "$${ll}_$$ld" ;\
#    done ;\
#done)


# Define variables before adding value:
#AREA_ANALYSERS = $(am__append_54) $(am__append_56) \
#	$(am__append_58)
#AREA_GENERATORS = $(am__append_55) $(am__append_57) \
#	$(am__append_59)

####### Automake targets: ########
# IFF alternative writing systems are defined:

# Define temporary variables to build final target filenames from:
#BASENAME_ANALYSERS_WS = $(sort $(basename $(GT_ANALYSERS)))
#ALT_WS_ANALYSERS_TMP = $(shell for ll in $(BASENAME_ANALYSERS_WS); do\
#    for ld in $(ALT_WSS); do\
#        echo "$$ll.$$ld" ;\
#    done ;\
#done)

#BASENAME_GENERATORS_WS = $(sort $(basename $(GT_GENERATORS)))
#ALT_WS_GENERATORS_TMP = $(shell for ll in $(BASENAME_GENERATORS_WS); do\
#    for ld in $(ALT_WSS); do\
#        echo "$$ll.$$ld" ;\
#    done ;\
#done)


# Define variables before adding value:
#ALT_WS_ANALYSERS = $(am__append_60) \
#	$(am__append_62) $(am__append_64)
#ALT_WS_GENERATORS = $(am__append_61) \
#	$(am__append_63) $(am__append_65)

####### Automake targets: ########
# IFF alternative orthographies are defined:

# Define temporary variables to build final target filenames from:
#BASENAME_ANALYSERS_ORTH = $(sort $(basename $(GT_ANALYSERS)))
#ALT_ORTH_ANALYSERS_TMP = $(shell for ll in $(BASENAME_ANALYSERS_ORTH); do\
#    for ld in $(ALT_ORTHS); do\
#        echo "$$ll.$$ld" ;\
#    done ;\
#done)

#BASENAME_GENERATORS_ORTH = $(sort $(basename $(GT_GENERATORS)))
#ALT_ORTH_GENERATORS_TMP = $(shell for ll in $(BASENAME_GENERATORS_ORTH); do\
#    for ld in $(ALT_ORTHS); do\
#        echo "$$ll.$$ld" ;\
#    done ;\
#done)


# Define variables before adding value:
#ALT_ORTH_ANALYSERS = $(am__append_66) \
#	$(am__append_68) $(am__append_70)
#ALT_ORTH_GENERATORS = $(am__append_67) \
#	$(am__append_69) $(am__append_71)

####### Automake targets: ########
# IFF different dialects are defined and enabled, compute target file names for
# dialect variants (normative fst's only):

# Define temporary variables to build final target filenames from:
#ALL_DIAL_BASENAME_ANALYSERS = $(sort $(basename $(GT_ANALYSERS)))
#NORM_DIAL_BASENAME_ANALYSERS = $(shell echo $(ALL_DIAL_BASENAME_ANALYSERS) \
#							| tr ' ' '\n' | grep 'norm' )

#DIAL_ANALYSERS_TMP = $(shell for ll in $(NORM_DIAL_BASENAME_ANALYSERS); do\
#    for ld in $(DIALECTS); do\
#        echo "$${ll}-dial_$$ld" ;\
#    done ;\
#done)

#ALL_DIAL_BASENAME_GENERATORS = $(sort $(basename $(GT_GENERATORS)))
#NORM_DIAL_BASENAME_GENERATORS = $(shell echo $(ALL_DIAL_BASENAME_GENERATORS) \
#							| tr ' ' '\n' | grep 'norm' )

#DIAL_GENERATORS_TMP = $(shell for ll in $(NORM_DIAL_BASENAME_GENERATORS); do\
#    for ld in $(DIALECTS); do\
#        echo "$${ll}-dial_$$ld" ;\
#    done ;\
#done)


# Define variables before adding value:
#DIAL_ANALYSERS = $(am__append_72) $(am__append_74) \
#	$(am__append_76)
#DIAL_GENERATORS = $(am__append_73) \
#	$(am__append_75) $(am__append_77)
#HFST_FORMAT = --format=foma
#HFST_FORMAT = --format=openfst-log
HFST_FORMAT = --format=openfst-tropical
#HFST_FORMAT = --format=sfst
#HFST_OLFORMAT = --format=optimized-lookup-unweighted
#HFST_OLFORMAT = --format=optimized-lookup-weighted
HFST_OLFORMAT = --format=optimized-lookup-weighted
#HFST_OLFORMAT = --format=optimized-lookup-unweighted

# hfst-compose:
AM_V_COMPOSE = $(AM_V_COMPOSE_$(V))
AM_V_COMPOSE_ = $(AM_V_COMPOSE_$(AM_DEFAULT_VERBOSITY))
AM_V_COMPOSE_0 = @echo "  HCOMPOSE $@";

# hfst-concatenate:
AM_V_HCONCAT = $(AM_V_HCONCAT_$(V))
AM_V_HCONCAT_ = $(AM_V_HCONCAT_$(AM_DEFAULT_VERBOSITY))
AM_V_HCONCAT_0 = @echo "  HCONCAT  $@";

# hfst-conjunct /
# hfst-intersect:
AM_V_CONJCT = $(AM_V_CONJCT_$(V))
AM_V_CONJCT_ = $(AM_V_CONJCT_$(AM_DEFAULT_VERBOSITY))
AM_V_CONJCT_0 = @echo "  HCONJCT  $@";

# hfst-fst2fst:
AM_V_FST2FST = $(AM_V_FST2FST_$(V))
AM_V_FST2FST_ = $(AM_V_FST2FST_$(AM_DEFAULT_VERBOSITY))
AM_V_FST2FST_0 = @echo "  HFST2FST $@";

# hfst-minimize
AM_V_HMINIM = $(AM_V_HMINIM_$(V))
AM_V_HMINIM_ = $(AM_V_HMINIM_$(AM_DEFAULT_VERBOSITY))
AM_V_HMINIM_0 = @echo "  HMINIM   $@";

# hfst-fst2txt:
AM_V_FST2TXT = $(AM_V_FST2TXT_$(V))
AM_V_FST2TXT_ = $(AM_V_FST2TXT_$(AM_DEFAULT_VERBOSITY))
AM_V_FST2TXT_0 = @echo "  HFST2TXT $@";

# hfst-foma:
AM_V_HFOMA = $(AM_V_HFOMA_$(V))
AM_V_HFOMA_ = $(AM_V_HFOMA_$(AM_DEFAULT_VERBOSITY))
AM_V_HFOMA_0 = @echo "  HFOMA    $@";

# hfst-optimized-lookup:
AM_V_HFSTOL = $(AM_V_HFSTOL_$(V))
AM_V_HFSTOL_ = $(AM_V_HFSTOL_$(AM_DEFAULT_VERBOSITY))
AM_V_HFSTOL_0 = @echo "  HFSTOL   $@";

# hfst-lexc:
AM_V_HLEXC = $(AM_V_HLEXC_$(V))
AM_V_HLEXC_ = $(AM_V_HLEXC_$(AM_DEFAULT_VERBOSITY))
AM_V_HLEXC_0 = @echo "  HLEXC    $@";

# hfst-split:
AM_V_HSPLIT = $(AM_V_HSPLIT_$(V))
AM_V_HSPLIT_ = $(AM_V_HSPLIT_$(AM_DEFAULT_VERBOSITY))
AM_V_HSPLIT_0 = @echo "  HSPLIT   $@";

# hfst-substitute:
AM_V_HSUBST = $(AM_V_HSUBST_$(V))
AM_V_HSUBST_ = $(AM_V_HSUBST_$(AM_DEFAULT_VERBOSITY))
AM_V_HSUBST_0 = @echo "  HSUBST   $@";

# hfst-twolc:
AM_V_HTWOLC = $(AM_V_HTWOLC_$(V))
AM_V_HTWOLC_ = $(AM_V_HTWOLC_$(AM_DEFAULT_VERBOSITY))
AM_V_HTWOLC_0 = @echo "  HTWOLC   $@";

# hfst-xfst:
AM_V_HXFST = $(AM_V_HXFST_$(V))
AM_V_HXFST_ = $(AM_V_HXFST_$(AM_DEFAULT_VERBOSITY))
AM_V_HXFST_0 = @echo "  HXFST    $@";

# hfst-compose-intersect:
AM_V_INTRSCT = $(AM_V_INTRSCT_$(V))
AM_V_INTRSCT_ = $(AM_V_INTRSCT_$(AM_DEFAULT_VERBOSITY))
AM_V_INTRSCT_0 = @echo "  HINTRSCT $@";

# hfst-invert:
AM_V_INVERT = $(AM_V_INVERT_$(V))
AM_V_INVERT_ = $(AM_V_INVERT_$(AM_DEFAULT_VERBOSITY))
AM_V_INVERT_0 = @echo "  HINVERT  $@";

# hfst-pmatch2fst
AM_V_PM2FST = $(AM_V_PM2FST_$(V))
AM_V_PM2FST_ = $(AM_V_PM2FST_$(AM_DEFAULT_VERBOSITY))
AM_V_PM2FST_0 = @echo "  HPM2FST  $@";

# hfst-project:
AM_V_PROJECT = $(AM_V_PROJECT_$(V))
AM_V_PROJECT_ = $(AM_V_PROJECT_$(AM_DEFAULT_VERBOSITY))
AM_V_PROJECT_0 = @echo "  HPROJECT $@";

# hfst-reverse
AM_V_REVERSE = $(AM_V_REVERSE_$(V))
AM_V_REVERSE_ = $(AM_V_REVERSE_$(AM_DEFAULT_VERBOSITY))
AM_V_REVERSE_0 = @echo "  HREVERSE $@";

# hfst-reweight:
AM_V_REWEIGHT = $(AM_V_REWEIGHT_$(V))
AM_V_REWEIGHT_ = $(AM_V_REWEIGHT_$(AM_DEFAULT_VERBOSITY))
AM_V_REWEIGHT_0 = @echo "  HREWGHT  $@";

# hfst-regexp2fst:
AM_V_RGX2FST = $(AM_V_RGX2FST_$(V))
AM_V_RGX2FST_ = $(AM_V_RGX2FST_$(AM_DEFAULT_VERBOSITY))
AM_V_RGX2FST_0 = @echo "  HRGX2FST $@";

# hfst-repeat
AM_V_REPEAT = $(AM_V_REPEAT_$(V))
AM_V_REPEAT_ = $(AM_V_REPEAT_$(AM_DEFAULT_VERBOSITY))
AM_V_REPEAT_0 = @echo "  HREPEAT  $@";

# hfst-strings2fst:
AM_V_STR2FST = $(AM_V_STR2FST_$(V))
AM_V_STR2FST_ = $(AM_V_STR2FST_$(AM_DEFAULT_VERBOSITY))
AM_V_STR2FST_0 = @echo "  HSTR2FST $@";

# hfst-txt2fst:
AM_V_TXT2FST = $(AM_V_TXT2FST_$(V))
AM_V_TXT2FST_ = $(AM_V_TXT2FST_$(AM_DEFAULT_VERBOSITY))
AM_V_TXT2FST_0 = @echo "  HTXT2FST $@";

# hfst-union / hfst-disjunct:
AM_V_UNION = $(AM_V_UNION_$(V))
AM_V_UNION_ = $(AM_V_UNION_$(AM_DEFAULT_VERBOSITY))
AM_V_UNION_0 = @echo "  HUNION   $@";

#### Foma
AM_V_FOMA = $(AM_V_FOMA_$(V))
AM_V_FOMA_ = $(AM_V_FOMA_$(AM_DEFAULT_VERBOSITY))
AM_V_FOMA_0 = @echo "  FOMA     $@";

#### Xerox tools
AM_V_TWOLC = $(AM_V_TWOLC_$(V))
AM_V_TWOLC_ = $(AM_V_TWOLC_$(AM_DEFAULT_VERBOSITY))
AM_V_TWOLC_0 = @echo "  TWOLC    $@";
AM_V_LEXC = $(AM_V_LEXC_$(V))
AM_V_LEXC_ = $(AM_V_LEXC_$(AM_DEFAULT_VERBOSITY))
AM_V_LEXC_0 = @echo "  LEXC     $@";
AM_V_XFST = $(AM_V_XFST_$(V))
AM_V_XFST_ = $(AM_V_XFST_$(AM_DEFAULT_VERBOSITY))
AM_V_XFST_0 = @echo "  XFST     $@";

#### VislCG3
AM_V_CGCOMP = $(AM_V_CGCOMP_$(V))
AM_V_CGCOMP_ = $(AM_V_CGCOMP_$(AM_DEFAULT_VERBOSITY))
AM_V_CGCOMP_0 = @echo "  CG3COMP  $@";

#### Other tools
AM_V_CP = $(AM_V_CP_$(V))
AM_V_CP_ = $(AM_V_CP_$(AM_DEFAULT_VERBOSITY))
AM_V_CP_0 = @echo "  CP       $@";
AM_V_MV = $(AM_V_MV_$(V))
AM_V_MV_ = $(AM_V_MV_$(AM_DEFAULT_VERBOSITY))
AM_V_MV_0 = @echo "  MV       $@";
AM_V_GZIP = $(AM_V_GZIP_$(V))
AM_V_GZIP_ = $(AM_V_GZIP_$(AM_DEFAULT_VERBOSITY))
AM_V_GZIP_0 = @echo "  GZIP     $@";
AM_V_ZIP = $(AM_V_ZIP_$(V))
AM_V_ZIP_ = $(AM_V_ZIP_$(AM_DEFAULT_VERBOSITY))
AM_V_ZIP_0 = @echo "  ZIP      $@";
AM_V_SAXON = $(AM_V_SAXON_$(V))
AM_V_SAXON_ = $(AM_V_SAXON_$(AM_DEFAULT_VERBOSITY))
AM_V_SAXON_0 = @echo "  SAXON    $@";
AM_V_XSLPROC = $(AM_V_XSLPROC_$(V))
AM_V_XSLPROC_ = $(AM_V_XSLPROC_$(AM_DEFAULT_VERBOSITY))
AM_V_XSLPROC_0 = @echo "  XSLPROC  $@";
AM_V_AWK = $(AM_V_AWK_$(V))
AM_V_AWK_ = $(AM_V_AWK_$(AM_DEFAULT_VERBOSITY))
AM_V_AWK_0 = @echo "  AWK      $@";
AM_V_SED = $(AM_V_SED_$(V))
AM_V_SED_ = $(AM_V_SED_$(AM_DEFAULT_VERBOSITY))
AM_V_SED_0 = @echo "  SED      $@";
AM_V_FORREST = $(AM_V_FORREST_$(V))
AM_V_FORREST_ = $(AM_V_FORREST_$(AM_DEFAULT_VERBOSITY))
AM_V_FORREST_0 = @echo "  FORREST  $@";

# Let the verbosity of some command line tools follow the automake verbosity.
# VERBOSITY       = be quiet if V=0, unspecified otherwise
# MORE_VERBOSITY  = be quiet if V=0, be verbose otherwise
VERBOSITY = $(if $(strip $(filter-out false,$(AM_V_P))), ,-q)
MORE_VERBOSITY = $(if $(strip $(filter-out false,$(AM_V_P))),-v,-q)
all: all-recursive

.SUFFIXES:
.SUFFIXES: .foma .hfst .regex .xfst
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/../giella-core/am-shared/src-dir-include.am $(top_srcdir)/../giella-core/am-shared/src_dictionary-include.am $(top_srcdir)/../giella-core/am-shared/src_disamb-include.am $(top_srcdir)/../giella-core/am-shared/src_oahpa-include.am $(top_srcdir)/../giella-core/am-shared/src_area-include.am $(top_srcdir)/../giella-core/am-shared/src_alt_ws-include.am $(top_srcdir)/../giella-core/am-shared/src_alt_orth-include.am $(top_srcdir)/../giella-core/am-shared/src_dialects-include.am $(top_srcdir)/../giella-core/am-shared/src_gramcheck-include.am $(top_srcdir)/../giella-core/am-shared/regex-include.am $(top_srcdir)/../giella-core/am-shared/lookup-include.am $(top_srcdir)/../giella-core/am-shared/xfscript-include.am $(top_srcdir)/../giella-core/am-shared/hfst-format-include.am $(top_srcdir)/../giella-core/am-shared/silent_build-include.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;
$(top_srcdir)/../giella-core/am-shared/src-dir-include.am $(top_srcdir)/../giella-core/am-shared/src_dictionary-include.am $(top_srcdir)/../giella-core/am-shared/src_disamb-include.am $(top_srcdir)/../giella-core/am-shared/src_oahpa-include.am $(top_srcdir)/../giella-core/am-shared/src_area-include.am $(top_srcdir)/../giella-core/am-shared/src_alt_ws-include.am $(top_srcdir)/../giella-core/am-shared/src_alt_orth-include.am $(top_srcdir)/../giella-core/am-shared/src_dialects-include.am $(top_srcdir)/../giella-core/am-shared/src_gramcheck-include.am $(top_srcdir)/../giella-core/am-shared/regex-include.am $(top_srcdir)/../giella-core/am-shared/lookup-include.am $(top_srcdir)/../giella-core/am-shared/xfscript-include.am $(top_srcdir)/../giella-core/am-shared/hfst-format-include.am $(top_srcdir)/../giella-core/am-shared/silent_build-include.am $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-hfstdataDATA: $(hfstdata_DATA)
	@$(NORMAL_INSTALL)
	@list='$(hfstdata_DATA)'; test -n "$(hfstdatadir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(hfstdatadir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(hfstdatadir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(hfstdatadir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(hfstdatadir)" || exit $$?; \
	done

uninstall-hfstdataDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(hfstdata_DATA)'; test -n "$(hfstdatadir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(hfstdatadir)'; $(am__uninstall_files_from_dir)

# This directory's subdirectories are mostly independent; you can cd
# into them and run 'make' without going through this Makefile.
# To change the values of 'make' variables: instead of editing Makefiles,
# (1) if the variable is set in 'config.status', edit 'config.status'
#     (which will cause the Makefiles to be regenerated when you run 'make');
# (2) otherwise, pass the desired values on the 'make' command line.
$(am__recursive_targets):
	@fail=; \
	if $(am__make_keepgoing); then \
	  failcom='fail=yes'; \
	else \
	  failcom='exit 1'; \
	fi; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-recursive
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-recursive

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-recursive

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    $(am__make_dryrun) \
	      || test -d "$(distdir)/$$subdir" \
	      || $(MKDIR_P) "$(distdir)/$$subdir" \
	      || exit 1; \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(DATA)
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(hfstdatadir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-generic clean-local mostlyclean-am

distclean: distclean-recursive
	-rm -f Makefile
distclean-am: clean-am distclean-generic distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am: install-hfstdataDATA

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am:

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-generic

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-hfstdataDATA

.MAKE: $(am__recursive_targets) install-am install-strip

.PHONY: $(am__recursive_targets) CTAGS GTAGS TAGS all all-am check \
	check-am clean clean-generic clean-local cscopelist-am ctags \
	ctags-am distclean distclean-generic distclean-tags distdir \
	dvi dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-hfstdataDATA install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	installdirs-am maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-generic pdf pdf-am ps ps-am tags \
	tags-am uninstall uninstall-am uninstall-hfstdataDATA

.PRECIOUS: Makefile


#################################################
#### Add language-specific build rules here: ####

# Hfst - add weights to compounds if using tropical-semiring fst format:
generator-raw-gt-desc.hfst: generator-raw-gt-desc.tmp.hfst
	$(AM_V_REWEIGHT)$(HFST_REWEIGHT) $(MORE_VERBOSITY) $(HFST_FLAGS) \
			-S '+Cmp' -a 10 --arcs-only -i $< \
		> $@

# We need to add processing of language-specific tags in the analyser:
analyser-gt-desc.%: analyser-gt-desc.tmp.% \
					filters/remove-derivation-position-tags.% \
					filters/remove-norm-comp-tags.%             \
					filters/remove-modifier-letter-vertical-line.% \
					filters/remove-letter-dot-below.%
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
			    @\"filters/remove-derivation-position-tags.$*\" \
			.o. @\"filters/remove-norm-comp-tags.$*\"           \
			.o. @\"$<\"                                         \
			.o. @\"filters/remove-letter-dot-below.$*\" \
			.o. @\"filters/remove-modifier-letter-vertical-line.$*\"   \
			;\n\
		 $(INVERT_HFST)\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# And also for the normative analyser (foma and hfst):
analyser-gt-norm.%: analyser-gt-norm.tmp.% \
					filters/remove-derivation-position-tags.% \
					filters/remove-illegal-derivation-strings-flagbased.% \
					filters/insert-default-compounding-tags.% \
					filters/insert-default_left_compounding-tags.% \
					filters/block-illegal_compound-strings.%  \
					filters/split-CmpN-tags.% \
					filters/convert_to_flags-CmpNP-tags.% \
					filters/split-CmpNP-tags.% \
					filters/remove-modifier-letter-vertical-line.% \
					filters/remove-letter-dot-below.%
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
			    @\"filters/remove-derivation-position-tags.$*\" \
			.o.	@\"filters/block-illegal_compound-strings.$*\"          \
			.o. @\"filters/split-CmpN-tags.$*\"                         \
			.o. @\"filters/insert-default_left_compounding-tags.$*\"    \
			.o. @\"filters/insert-default-compounding-tags.$*\"         \
			.o. @\"filters/remove-illegal-derivation-strings-flagbased.$*\" \
			.o. @\"filters/convert_to_flags-CmpNP-tags.$*\"            \
			.o. @\"filters/split-CmpNP-tags.$*\"                       \
			.o. @\"$<\"                                                \
			.o. @\"filters/remove-letter-dot-below.$*\"                \
			.o. @\"filters/remove-modifier-letter-vertical-line.$*\"   \
			;\n\
		 twosided flag-diacritics\n\
		 $(INVERT_HFST)\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# The operation 'twosided flag-diacritics" crashes Xerox badly, so we do with
# a simpler, less restrictive normative fst when building with Xerox:
analyser-gt-norm.xfst: analyser-gt-norm.tmp.xfst \
					filters/remove-norm-comp-tags.xfst                \
					filters/remove-derivation-position-tags.xfst      \
					filters/remove-illegal-derivation-strings.xfst    \
					filters/remove-modifier-letter-vertical-line.xfst \
					filters/remove-letter-dot-below.xfst
	$(AM_V_XFST)$(PRINTF) "read regex \
				@\"filters/remove-norm-comp-tags.xfst\"                \
			.o. @\"filters/remove-derivation-position-tags.xfst\"      \
			.o. @\"filters/remove-illegal-derivation-strings.xfst\"    \
			.o. @\"$<\"                                                \
			.o. @\"filters/remove-letter-dot-below.xfst\"              \
			.o. @\"filters/remove-modifier-letter-vertical-line.xfst\" \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST) $(VERBOSITY)

# We need special treatment of the disamb fst going to further pmatch processing
# mainly due to the target pattern, thus listed here. The rule body and the
# dependencies should be the same as the regular disamb analysers below:
analyser-pmatchdisamb-gt-desc.hfst: analyser-pmatchdisamb-gt-desc.tmp.hfst \
				filters/remove-norm-comp-tags.hfst             \
				filters/remove-derivation-position-tags.hfst   \
				filters/remove-orig_lang-tags.hfst             \
				filters/rename-POS_before_Der-tags.hfst        
	$(AM_V_HXFST)$(PRINTF) "read regex \
		    @\"filters/remove-derivation-position-tags.hfst\" \
		.o. @\"filters/remove-norm-comp-tags.hfst\"           \
		.o. @\"filters/remove-orig_lang-tags.hfst\"           \
		.o. @\"filters/rename-POS_before_Der-tags.hfst\"      \
		.o. @\"$<\"                                           \
		;\n\
	invert net\n\
	save stack $@\n\
	quit\n" | $(HFST_XFST) -p $(MORE_VERBOSITY)

# Special case for the disamb analyser, since it follows the same filename
# pattern as the raw fst:
analyser-disamb-gt-desc.%: analyser-disamb-gt-desc.tmp.%           \
					filters/remove-derivation-position-tags.%      \
					filters/remove-norm-comp-tags.%                \
					filters/remove-orig_lang-tags.%                \
					filters/remove-dialect-tags.%                  \
					filters/remove-homonymy-tags.%                 \
					filters/remove-modifier-letter-vertical-line.% \
					filters/remove-letter-dot-below.%              \
					filters/rename-POS_before_Der-tags.%
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/remove-derivation-position-tags.$*\"      \
			.o. @\"filters/remove-orig_lang-tags.$*\"                \
			.o. @\"filters/remove-dialect-tags.$*\"                  \
			.o. @\"filters/remove-homonymy-tags.$*\"                 \
			.o. @\"filters/remove-norm-comp-tags.$*\"                \
			.o. @\"filters/rename-POS_before_Der-tags.$*\"           \
			.o. @\"$<\"                                              \
			.o. @\"filters/remove-letter-dot-below.$*\"              \
			.o. @\"filters/remove-modifier-letter-vertical-line.$*\" \
			;\n\
		 $(INVERT_HFST)\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# We need to add processing of language-specific tags in the generator:
define giella_generators
generator-gt-%.$(1): generator-gt-%.tmp.$(1) \
					 filters/remove-derivation-position-tags.$(1)      \
					 filters/remove-norm-comp-tags.$(1)                \
					 filters/remove-modifier-letter-vertical-line.$(1) \
					 filters/remove-letter-dot-below.$(1)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-derivation-position-tags.$(1)\"      \
			.o. @\"filters/remove-norm-comp-tags.$(1)\"                \
			.o. @\"$$<\"                                               \
			.o. @\"filters/remove-letter-dot-below.$(1)\"              \
			.o. @\"filters/remove-modifier-letter-vertical-line.$(1)\" \
			;\n\
		 $$(INVERT_XFST)$$(INVERT_FOMA)\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach fst,hfst xfst foma,$(eval $(call giella_generators,$(fst))))

# Do NOT apply the accent removal filters to the normative
# dictionary generator:
generator-dict-gt-norm.%: generator-dict-gt-norm.tmp.% \
					filters/remove-derivation-position-tags.% \
					filters/remove-norm-comp-tags.%
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/remove-derivation-position-tags.$*\" \
			.o. @\"filters/remove-norm-comp-tags.$*\"           \
			.o. @\"$<\"                                         \
			;\n\
		 $(INVERT_XFST)$(INVERT_FOMA)\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

####### Automake targets: ########
# Make sure that targets are deleted when something breaks:
.DELETE_ON_ERROR:

##################################################
######## Build rules for Xerox and HFST: #########
#
#       Each target transducer is defined together
#       for both transducer types,
#       first for HFST then for Xerox. This
#       makes it easy to check that the build
#       is parallell for the two transducer
#       types.
##################################################

# The "raw" transducer contains all tags and symbols available on the analysis
# side. Some of them are optional for generation, some are only needed for
# special tools. On the lower side, the raw transducer contains all
# morphological boundaries and hyphenation symbols. As such, this transducer
# can NOT be used for morphological analysis, and hardly for generation.

# if SKIP_PHONOLOGY is defined, the following block will be commented out:
#generator-raw-gt-desc.tmp.hfst: fst/lexicon.hfst
#	$(AM_V_CP)cp -f $< $@

#analyser-raw-gt-desc.tmp.%: fst/lexicon.%
#	$(AM_V_CP)cp -f $< $@

# First build a tmp1 raw file as the intersection between lexicon and rules:
# 1.a: Xfst-script file with lexicon reference, for faster compilation and rule
# composition:

# HFST
#generator-raw-gt-desc.tmp1.hfst: fst/phonology.hfst.xfscript \
#					 fst/lexicon.hfst
#	$(AM_V_HXFST)printf "save stack $@\nquit\n" | cat $< - \
#		| $(HFST_XFST) -p $(MORE_VERBOSITY) $(HFST_FORMAT)

# XEROX
#analyser-raw-gt-desc.tmp1.xfst: fst/phonology.xfst.xfscript \
#			 fst/lexicon.xfst
#	$(AM_V_XFST)$(XFST) $(VERBOSITY) -l $< -e "save stack $@" -stop

# FOMA
#analyser-raw-gt-desc.tmp1.foma: fst/phonology.foma.xfscript \
#			 fst/lexicon.foma
#	$(AM_V_FOMA)$(FOMA) $(VERBOSITY) -l $< -e "save stack $@" -s

# 1.b: Using either twolc or xfst script files without a lexicon reference:
# HFST
# Do this is reversed intersect is enabled:
generator-raw-gt-desc.tmp1.hfst: fst/lexicon.rev.hfst \
					 fst/phonology.rev.hfst
	$(AM_V_INTRSCT)\
		  $(HFST_DETERMINIZE) $(MORE_VERBOSITY) $(HFST_FLAGS) $< \
		| $(HFST_MINIMIZE) $(MORE_VERBOSITY) $(HFST_FLAGS) \
		| $(HFST_COMPOSE_INTERSECT) $(COMPOSE_INTERSECT_FLAG) \
			$(MORE_VERBOSITY) $(HFST_FLAGS) \
			-2 fst/phonology.rev.hfst \
		| $(HFST_REVERSE) \
		| $(HFST_MINIMIZE) $(MORE_VERBOSITY) $(HFST_FLAGS) \
		-o $@

# Otherwise do this:
#generator-raw-gt-desc.tmp1.hfst: fst/lexicon.hfst \
#					 fst/phonology.compose.hfst
#	$(AM_V_INTRSCT)\
#		  $(HFST_DETERMINIZE) $(MORE_VERBOSITY) $(HFST_FLAGS) $<\
#		| $(HFST_MINIMIZE) $(MORE_VERBOSITY) $(HFST_FLAGS) \
#		| $(HFST_COMPOSE_INTERSECT) $(COMPOSE_INTERSECT_FLAG) \
#			$(MORE_VERBOSITY) $(HFST_FLAGS) \
#			-2 fst/phonology.compose.hfst \
#		| $(HFST_MINIMIZE) $(MORE_VERBOSITY) $(HFST_FLAGS) \
#		-o $@

# XEROX
analyser-raw-gt-desc.tmp1.xfst: fst/lexicon.xfst \
			 fst/phonology.compose.xfst
	$(AM_V_LEXC)$(PRINTF) \
		"read-source fst/lexicon.xfst\nread-rules fst/phonology.compose.xfst\ncompose-result\nsave-result $@\nquit\n" \
		| $(LEXC) $(VERBOSITY)

# FOMA
analyser-raw-gt-desc.tmp1.foma: fst/lexicon.foma \
			 fst/phonology.compose.foma
	$(AM_V_FOMA)$(PRINTF) \
		"read regex \
				@\"$<\" \
			.o. @\"fst/phonology.compose.foma\" \
			; \n\
		 save stack $@\n\
		 quit\n" \
		| $(FOMA) $(VERBOSITY)

# ... then apply tag reordering to tmp1 to ensure the same tag order in all
# subsequent processing; this creates the regular tmp file, which can further
# get local processing to produce the final raw file:
### HFST - the raw files are generators, thus we need a special target (but
###        we try to keep the code as identical as possible, thus pattern rule):
# Variant a) - with a language-specific tag reordering script applied:
generator-raw-gt-desc.tmp.%: generator-raw-gt-desc.tmp1.%     \
					filters/reorder-tags.$(GTLANG).%          \
					filters/reorder-semantic-tags.%           \
					filters/reorder-subpos-tags.%
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/reorder-tags.$(GTLANG).$*\"          \
			.o. @\"filters/reorder-subpos-tags.$*\"             \
			.o. @\"filters/reorder-semantic-tags.$*\"           \
			.o. @\"$<\" \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# Variant b) - without a language-specific tag reordering script:
generator-raw-gt-desc.tmp.%: generator-raw-gt-desc.tmp1.%     \
					filters/reorder-semantic-tags.%           \
					filters/reorder-subpos-tags.%
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/reorder-subpos-tags.$*\"             \
			.o. @\"filters/reorder-semantic-tags.$*\"           \
			.o. @\"$<\" \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

#### Xerox & FOMA - no special treatment:
# Variant a) - with a language-specific tag reordering script applied:
analyser-raw-gt-desc.tmp.%: analyser-raw-gt-desc.tmp1.%       \
					filters/reorder-tags.$(GTLANG).%          \
					filters/reorder-semantic-tags.%           \
					filters/reorder-subpos-tags.%
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/reorder-tags.$(GTLANG).$*\"          \
			.o. @\"filters/reorder-subpos-tags.$*\"             \
			.o. @\"filters/reorder-semantic-tags.$*\"           \
			.o. @\"$<\" \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# Variant b) - without a language-specific tag reordering script:
analyser-raw-gt-desc.tmp.%: analyser-raw-gt-desc.tmp1.%       \
					filters/reorder-semantic-tags.%           \
					filters/reorder-subpos-tags.%
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/reorder-subpos-tags.$*\"             \
			.o. @\"filters/reorder-semantic-tags.$*\"           \
			.o. @\"$<\" \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# Target to build glossing raw analysers, ie one where all tags are in the
# position specified in lexc:
# Hfst:
generator-raw-gt-glossing.tmp.%: generator-raw-gt-desc.tmp1.%
	$(AM_V_CP)cp $< $@

# Xerox/Foma:
analyser-raw-gt-glossing.tmp.%: analyser-raw-gt-desc.tmp1.%
	$(AM_V_CP)cp $< $@

# Target required for the pattern rules below to work for HFST builds:
analyser-raw-gt-%.hfst: generator-raw-gt-%.hfst
	$(AM_V_CP)cp $< $@

# To get a transducer usable for a certain application, the raw transducer needs
# to be filtered and manipulated to get the target tag set and surface symbols.
# That is done in all subsequent targets, which builds on the raw transducer
# built above.

# This is the default, descriptive analyser:
# Visible tags (ie do NOT remove):
#   - variant tags
#   - the Err/Orth tag
# Invisible tags (ie to be removed):
#   - semantic tags
#   - homonymy tags
analyser-gt-desc.tmp.%: analyser-raw-gt-desc.%                \
					filters/remove-area-tags.%                \
					filters/remove-dialect-tags.%             \
					filters/remove-number-string-tags.%       \
					filters/remove-usage-tags.%               \
					filters/remove-semantic-tags.%            \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-orthography-tags.%         \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-orig_lang-tags.%           \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					filters/remove-mwe-tags.%                 \
					orthography/inituppercase.compose.%       \
					orthography/spellrelax.compose.%          \
					$(GLT_DOWNCASE_FILTER)
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$*\"                \
			.o. @\"filters/remove-dialect-tags.$*\"             \
			.o. @\"filters/remove-number-string-tags.$*\"       \
			.o. @\"filters/remove-usage-tags.$*\"               \
			.o. @\"filters/remove-semantic-tags.$*\"            \
			.o. @\"filters/remove-orig_lang-tags.$*\"           \
			.o. @\"filters/remove-orthography-tags.$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$*\"    \
			.o. @\"filters/remove-Use_GC-strings.$*\"           \
			.o. @\"filters/remove-Use_minusGC-tags.$*\"         \
			.o. @\"filters/remove-Use_PMatch-strings.$*\"       \
			.o. @\"filters/remove-mwe-tags.$*\"                 \
			.o. @\"$<\" \
			    $(GLT_DOWNCASE_COMPOSE) \
			.o. @\"filters/remove-hyphenation-marks.$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$*\"       \
			.o. @\"filters/remove-word-boundary.$*\"            \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/inituppercase.compose.$*\"       \
			.o. @\"orthography/spellrelax.compose.$*\"          \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# This is the default, descriptive generating transducer.
generator-gt-desc.tmp.%: analyser-raw-gt-desc.%            \
					filters/make-optional-transitivity-tags.% \
					filters/make-optional-homonymy-tags.%     \
					filters/make-optional-hyph-tags.%         \
					filters/make-optional-variant-tags.%      \
					filters/make-optional-semantic-tags.%     \
					filters/make-optional-error-tags.%        \
					filters/make-optional-adv_comp-tags.%     \
					filters/make-optional-orig_lang-tags.%    \
					filters/remove-area-tags.%                \
					filters/remove-dialect-tags.%             \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-number-string-tags.%       \
					filters/remove-orthography-tags.%         \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-usage-tags.%               \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					filters/remove-mwe-tags.%                 \
					$(GLT_DOWNCASE_FILTER)
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$*\" \
			.o. @\"filters/make-optional-homonymy-tags.$*\"     \
			.o. @\"filters/make-optional-hyph-tags.$*\"         \
			.o. @\"filters/make-optional-variant-tags.$*\"      \
			.o. @\"filters/make-optional-semantic-tags.$*\"     \
			.o. @\"filters/make-optional-error-tags.$*\"        \
			.o. @\"filters/make-optional-adv_comp-tags.$*\"     \
			.o. @\"filters/make-optional-orig_lang-tags.$*\"    \
			.o. @\"filters/remove-area-tags.$*\"                \
			.o. @\"filters/remove-dialect-tags.$*\"             \
			.o. @\"filters/remove-number-string-tags.$*\"       \
			.o. @\"filters/remove-usage-tags.$*\"               \
			.o. @\"filters/remove-orthography-tags.$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$*\"    \
			.o. @\"filters/remove-Use_GC-strings.$*\"           \
			.o. @\"filters/remove-Use_minusGC-tags.$*\"         \
			.o. @\"filters/remove-Use_PMatch-strings.$*\"       \
			.o. @\"filters/remove-mwe-tags.$*\"                 \
			.o. @\"$<\" \
			    $(GLT_DOWNCASE_COMPOSE) \
			.o. @\"filters/remove-hyphenation-marks.$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$*\"       \
			.o. @\"filters/remove-word-boundary.$*\"            \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

analyser-gt-glossing.tmp.%: analyser-raw-gt-glossing.%        \
					filters/remove-area-tags.%                \
					filters/remove-dialect-tags.%             \
					filters/remove-number-string-tags.%       \
					filters/remove-usage-tags.%               \
					filters/remove-semantic-tags.%            \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-orthography-tags.%         \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-orig_lang-tags.%           \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					filters/remove-mwe-tags.%                 \
					orthography/inituppercase.compose.%       \
					orthography/spellrelax.compose.%          \
					$(GLT_DOWNCASE_FILTER)
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$*\"                \
			.o. @\"filters/remove-dialect-tags.$*\"             \
			.o. @\"filters/remove-number-string-tags.$*\"       \
			.o. @\"filters/remove-usage-tags.$*\"               \
			.o. @\"filters/remove-semantic-tags.$*\"            \
			.o. @\"filters/remove-orig_lang-tags.$*\"           \
			.o. @\"filters/remove-orthography-tags.$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$*\"    \
			.o. @\"filters/remove-Use_GC-strings.$*\"           \
			.o. @\"filters/remove-Use_minusGC-tags.$*\"         \
			.o. @\"filters/remove-Use_PMatch-strings.$*\"       \
			.o. @\"filters/remove-mwe-tags.$*\"                 \
			.o. @\"$<\" \
			    $(GLT_DOWNCASE_COMPOSE) \
			.o. @\"filters/remove-hyphenation-marks.$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$*\"       \
			.o. @\"filters/remove-word-boundary.$*\"            \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/inituppercase.compose.$*\"       \
			.o. @\"orthography/spellrelax.compose.$*\"          \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# This is the default, descriptive generating transducer.
generator-gt-glossing.tmp.%: analyser-raw-gt-glossing.%       \
					filters/make-optional-transitivity-tags.% \
					filters/make-optional-homonymy-tags.%     \
					filters/make-optional-hyph-tags.%         \
					filters/make-optional-variant-tags.%      \
					filters/make-optional-semantic-tags.%     \
					filters/make-optional-error-tags.%        \
					filters/make-optional-adv_comp-tags.%     \
					filters/make-optional-orig_lang-tags.%    \
					filters/remove-area-tags.%                \
					filters/remove-dialect-tags.%             \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-number-string-tags.%       \
					filters/remove-orthography-tags.%         \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-usage-tags.%               \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					filters/remove-mwe-tags.%                 \
					$(GLT_DOWNCASE_FILTER)
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$*\" \
			.o. @\"filters/make-optional-homonymy-tags.$*\"     \
			.o. @\"filters/make-optional-hyph-tags.$*\"         \
			.o. @\"filters/make-optional-variant-tags.$*\"      \
			.o. @\"filters/make-optional-semantic-tags.$*\"     \
			.o. @\"filters/make-optional-error-tags.$*\"        \
			.o. @\"filters/make-optional-adv_comp-tags.$*\"     \
			.o. @\"filters/make-optional-orig_lang-tags.$*\"    \
			.o. @\"filters/remove-area-tags.$*\"                \
			.o. @\"filters/remove-dialect-tags.$*\"             \
			.o. @\"filters/remove-number-string-tags.$*\"       \
			.o. @\"filters/remove-usage-tags.$*\"               \
			.o. @\"filters/remove-orthography-tags.$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$*\"    \
			.o. @\"filters/remove-Use_GC-strings.$*\"           \
			.o. @\"filters/remove-Use_minusGC-tags.$*\"         \
			.o. @\"filters/remove-Use_PMatch-strings.$*\"       \
			.o. @\"filters/remove-mwe-tags.$*\"                 \
			.o. @\"$<\" \
			    $(GLT_DOWNCASE_COMPOSE) \
			.o. @\"filters/remove-hyphenation-marks.$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$*\"       \
			.o. @\"filters/remove-word-boundary.$*\"            \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# This is the normative analyser:
# Remove sub-standard/error forms to get a normative transducer
analyser-gt-norm.tmp.%: analyser-raw-gt-desc.%                \
					filters/remove-area-tags.%                \
					filters/remove-dialect-tags.%             \
					filters/remove-variant-tags.%             \
					filters/remove-number-string-tags.%       \
					filters/remove-usage-tags.%               \
					filters/remove-error-strings.%            \
					filters/remove-semantic-tags.%            \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-orthography-tags.%         \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-orig_lang-tags.%           \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					filters/remove-mwe-tags.%                 \
					orthography/inituppercase.compose.%       \
					$(GLT_DOWNCASE_FILTER)
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$*\"                \
			.o. @\"filters/remove-dialect-tags.$*\"             \
			.o. @\"filters/remove-variant-tags.$*\"             \
			.o. @\"filters/remove-number-string-tags.$*\"       \
			.o. @\"filters/remove-usage-tags.$*\"               \
			.o. @\"filters/remove-semantic-tags.$*\"            \
			.o. @\"filters/remove-error-strings.$*\"            \
			.o. @\"filters/remove-orig_lang-tags.$*\"           \
			.o. @\"filters/remove-orthography-tags.$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$*\"    \
			.o. @\"filters/remove-Use_GC-strings.$*\"           \
			.o. @\"filters/remove-Use_minusGC-tags.$*\"         \
			.o. @\"filters/remove-Use_PMatch-strings.$*\"       \
			.o. @\"filters/remove-mwe-tags.$*\"                 \
			.o. @\"$<\" \
			    $(GLT_DOWNCASE_COMPOSE) \
			.o. @\"filters/remove-hyphenation-marks.$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$*\"       \
			.o. @\"filters/remove-word-boundary.$*\"            \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/inituppercase.compose.$*\"       \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# This is the normative generating transducer.
generator-gt-norm.tmp.%: analyser-raw-gt-desc.%            \
					filters/make-optional-transitivity-tags.% \
					filters/make-optional-homonymy-tags.%     \
					filters/make-optional-hyph-tags.%         \
					filters/make-optional-variant-tags.%      \
					filters/make-optional-semantic-tags.%     \
					filters/make-optional-adv_comp-tags.%     \
					filters/make-optional-orig_lang-tags.%    \
					filters/remove-area-tags.%                \
					filters/remove-dialect-tags.%             \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-number-string-tags.%       \
					filters/remove-usage-tags.%               \
					filters/remove-orthography-tags.%         \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-error-strings.%            \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					filters/remove-mwe-tags.%                 \
					$(GLT_DOWNCASE_FILTER)
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$*\" \
			.o. @\"filters/make-optional-homonymy-tags.$*\"     \
			.o. @\"filters/make-optional-hyph-tags.$*\"         \
			.o. @\"filters/make-optional-variant-tags.$*\"      \
			.o. @\"filters/make-optional-semantic-tags.$*\"     \
			.o. @\"filters/make-optional-adv_comp-tags.$*\"     \
			.o. @\"filters/make-optional-orig_lang-tags.$*\"    \
			.o. @\"filters/remove-area-tags.$*\"                \
			.o. @\"filters/remove-dialect-tags.$*\"             \
			.o. @\"filters/remove-number-string-tags.$*\"       \
			.o. @\"filters/remove-usage-tags.$*\"               \
			.o. @\"filters/remove-error-strings.$*\"            \
			.o. @\"filters/remove-orthography-tags.$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$*\"    \
			.o. @\"filters/remove-Use_GC-strings.$*\"           \
			.o. @\"filters/remove-Use_minusGC-tags.$*\"         \
			.o. @\"filters/remove-Use_PMatch-strings.$*\"       \
			.o. @\"filters/remove-mwe-tags.$*\"                 \
			.o. @\"$<\" \
			    $(GLT_DOWNCASE_COMPOSE) \
			.o. @\"filters/remove-hyphenation-marks.$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$*\"       \
			.o. @\"filters/remove-word-boundary.$*\"            \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# Create generic tagset variants of *analyzers*
# HFST:
# Standard descriptive
analyser-%-desc.hfst: analyser-gt-desc.hfst tagsets/%.relabel
	$(AM_V_FST2FST)$(HFST_FST2FST) $(HFST_FLAGS) $(HFST_FORMAT) -t $< \
		| $(HFST_SUBSTITUTE) $(HFST_FLAGS) $(HFST_FORMAT) \
		  -F $(srcdir)/tagsets/$*.relabel \
		-o $@

# Relabeling using compiled regex:
analyser-%-desc.hfst: analyser-gt-desc.hfst tagsets/%.hfst
	$(AM_V_RGX2FST)$(PRINTF) "\
			    @\"$<\" \
			.o. @\"tagsets/$*.hfst\".i \
			;" \
		| $(HFST_REGEXP2FST) $(HFST_FLAGS) $(HFST_FORMAT) \
			-S --xerox-composition=ON \
		-o $@

# Standard normative
analyser-%-norm.hfst: analyser-gt-norm.hfst tagsets/%.relabel
	$(AM_V_FST2FST)$(HFST_FST2FST) $(HFST_FLAGS) $(HFST_FORMAT) -t $< \
		| $(HFST_SUBSTITUTE) $(HFST_FLAGS) $(HFST_FORMAT) \
			-F $(srcdir)/tagsets/$*.relabel \
		-o $@

# Relabeling using compiled regex:
analyser-%-norm.hfst: analyser-gt-norm.hfst tagsets/%.hfst
	$(AM_V_RGX2FST)$(PRINTF) "\
			    @\"$<\" \
			.o. @\"tagsets/$*.hfst\".i \
			;" \
		| $(HFST_REGEXP2FST) $(HFST_FLAGS) $(HFST_FORMAT) \
			-S --xerox-composition=ON \
		-o $@

# Create tagset variants of *generators*
# Standard descriptive
generator-%-desc.hfst: generator-gt-desc.hfst tagsets/%.relabel
	$(AM_V_FST2FST)$(HFST_FST2FST) $(HFST_FLAGS) $(HFST_FORMAT) -t $< \
		| $(HFST_SUBSTITUTE) $(HFST_FLAGS) $(HFST_FORMAT) \
			-F $(srcdir)/tagsets/$*.relabel \
		-o $@

# Relabeling using compiled regex:
generator-%-desc.hfst: generator-gt-desc.hfst tagsets/%.hfst
	$(AM_V_RGX2FST)$(PRINTF) "\
			    @\"tagsets/$*.hfst\" \
			.o. @\"$<\" \
			;" \
		| $(HFST_REGEXP2FST) $(HFST_FLAGS) $(HFST_FORMAT) \
			-S --xerox-composition=ON \
		-o $@

# Standard normative
generator-%-norm.hfst: generator-gt-norm.hfst tagsets/%.relabel
	$(AM_V_FST2FST)$(HFST_FST2FST) $(HFST_FLAGS) $(HFST_FORMAT) -t $< \
		| $(HFST_SUBSTITUTE) $(HFST_FLAGS) $(HFST_FORMAT) \
			-F $(srcdir)/tagsets/$*.relabel \
		-o $@

# Relabeling using compiled regex:
generator-%-norm.hfst: generator-gt-norm.hfst tagsets/%.hfst
	$(AM_V_RGX2FST)$(PRINTF) "\
			    @\"tagsets/$*.hfst\" \
			.o. @\"$<\" \
			;" \
		| $(HFST_REGEXP2FST) $(HFST_FLAGS) $(HFST_FORMAT) \
			-S --xerox-composition=ON \
		-o $@

# XEROX/XFST:
# Standard descriptive
analyser-%-desc.xfst: analyser-gt-desc.xfst tagsets/%.xfst
	$(AM_V_XFST)$(PRINTF) "read regex \
			    @\"tagsets/$*.xfst\" \
			.o. @\"$<\" \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST) $(VERBOSITY)

# Standard normative
analyser-%-norm.xfst: analyser-gt-norm.xfst tagsets/%.xfst
	$(AM_V_XFST)$(PRINTF) "read regex \
			    @\"tagsets/$*.xfst\" \
			.o. @\"$<\" \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST) $(VERBOSITY)

# Create tagset variants of *generators*
# Standard descriptive
generator-%-desc.xfst: generator-gt-desc.xfst tagsets/%.xfst
	$(AM_V_XFST)$(PRINTF) "read regex \
			    @\"$<\" \
			.o. @\"tagsets/$*.xfst\".i \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST) $(VERBOSITY)

# Standard normative
generator-%-norm.xfst: generator-gt-norm.xfst tagsets/%.xfst
	$(AM_V_XFST)$(PRINTF) "read regex \
			    @\"$<\" \
			.o. @\"tagsets/$*.xfst\".i \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST) $(VERBOSITY)

# lemmatization is a special case of tagset variant
lemmatize.default.hfst: analyser-gt-desc.hfst tagsets/lemmatize.relabel
	$(AM_V_HSUBST)$(HFST_SUBSTITUTE) $(HFST_FLAGS) $(HFST_FORMAT) \
		-F $(srcdir)/tagsets/lemmatize.relabel -i $< -o $@

# morpher is a morph segmenting variant: taloautoissani -> talo#auto>i>ssa>ni
morpher-gt-desc.tmp.%: analyser-raw-gt-desc.% \
					 orthography/inituppercase.compose.% \
					 orthography/spellrelax.compose.% \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
			 [ [@\"$<\" \
				.o. @\"orthography/inituppercase.compose.$*\"         \
				.o. @\"orthography/spellrelax.compose.$*\"  ].l       \
			.o. @\"filters/remove-hyphenation-marks.$*\"  \
			.o. @\"filters/remove-infl_deriv-borders.$*\" \
			.o. @\"filters/remove-word-boundary.$*\"  ] \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# We want the URL analyser be made available as a standard analyser, both in its
# own right, and for further processing down the stream.
analyser-url-gt-desc.%: fst/url.%
	$(AM_V_XFST_TOOL)$(PRINTF) "\
		 load stack $<\n\
		 $(INVERT_HFST)\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

####### Other targets: ###########

# Copy the raw transducer. This enables language-specific processing of the raw
# transducer, if required.
define giella_raw_fsts
%raw-gt-desc.$(1): %raw-gt-desc.tmp.$(1)
	$$(AM_V_CP)cp -f $$< $$@

%raw-gt-error.$(1): %raw-gt-error.tmp.$(1)
	$$(AM_V_CP)cp -f $$< $$@
endef
$(foreach fst,hfst xfst foma,$(eval $(call giella_raw_fsts,$(fst))))

# Default fallback processing for the analysers:
define giella_default_analysers
analyser%.$(1): analyser%.tmp.$(1)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "\
		 load stack $$<\n\
		 $$(INVERT_HFST)\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach fst,hfst xfst foma,$(eval $(call giella_default_analysers,$(fst))))

# Default fallback processing for the generators:
define giella_default_generators
generator%.$(1): generator%.tmp.$(1)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "\
		 load stack $$<\n\
		 $$(INVERT_XFST)$$(INVERT_FOMA)\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach fst,hfst xfst foma,$(eval $(call giella_default_generators,$(fst))))

# Default fallback processing for the morpher:
define giella_default_morphers
morpher%.$(1): morpher%.tmp.$(1)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "\
		 load stack $$<\n\
		 $$(INVERT_HFST)\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach fst,hfst xfst foma,$(eval $(call giella_default_morphers,$(fst))))

# cleaning
clean-local:
	-rm -f *.hfst *.xfst *.foma *.hfstol

##### END Xerox target list #####

# Building dictionary fsts. The dictionary analyser differs from the
# regular analyser by NOT removing variant and homonym tags, so that we can
# generate proper (mini)paradigms for the given lemmas and variants (the
# analysis string is used as input to the generator).
# Tags to be removed:
#   - Sem/-taggar
#   - OLang/*
#   - MWE
analyser-dict-gt-desc.tmp.%: analyser-raw-gt-desc.%            \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-orig_lang-tags.%            \
					filters/remove-usage_except_NGminip-tags.% \
					filters/remove-semantic-tags.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/inituppercase.compose.%        \
					orthography/spellrelax.compose.%           \
					$(GLT_DOWNCASE_FILTER)
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$*\"                 \
			.o. @\"filters/remove-dialect-tags.$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$*\"            \
			.o. @\"filters/remove-usage_except_NGminip-tags.$*\" \
			.o. @\"filters/remove-semantic-tags.$*\"             \
			.o. @\"filters/remove-orthography-tags.$*\"          \
			.o. @\"filters/remove-Orth_IPA-strings.$*\"          \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$*\"     \
			.o. @\"filters/remove-Use_minusGC-tags.$*\"          \
			.o. @\"filters/remove-Use_GC-strings.$*\"            \
			.o. @\"filters/remove-Use_PMatch-strings.$*\"        \
			.o. @\"filters/remove-mwe-tags.$*\"                  \
			.o. @\"$<\"                                          \
			    $(GLT_DOWNCASE_COMPOSE) \
			.o. @\"filters/remove-hyphenation-marks.$*\"         \
			.o. @\"filters/remove-infl_deriv-borders.$*\"        \
			.o. @\"filters/remove-word-boundary.$*\"             \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/inituppercase.compose.$*\"        \
			.o. @\"orthography/spellrelax.compose.$*\"           \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# The mobile analyser is just like the regular dictionary analyser,
# except for one additional set of spellrelaxes:
analyser-dict-gt-desc-mobile.tmp.%: analyser-dict-gt-desc.tmp.% \
					orthography/spellrelax-mobile-keyboard.compose.%
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
			    @\"$<\" \
			.o. @\"orthography/spellrelax-mobile-keyboard.compose.$*\" \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# The generator does NOT NGminip tagged strings, since we do
# not want them in the miniparadigms generated by this transducer. At the same
# time, this transducer DOES CONTAIN the homonym and variant tags, to govern
# proper paradigm generation.
# Obligatory tags:
#   - homonymy tags
#   - variant tags
#   - Use/NGminip ??? - check with Lene!
generator-dict-gt-norm.tmp.%: analyser-raw-gt-desc.%           \
					filters/remove-area-tags.%                 \
					filters/make-optional-hyph-tags.%          \
					filters/make-optional-transitivity-tags.%  \
					filters/make-optional-semantic-tags.%      \
					filters/make-optional-v1-tags.%            \
					filters/make-optional-adv_comp-tags.%      \
					filters/remove-dialect-tags.%              \
					filters/remove-orig_lang-tags.%            \
					filters/remove-usage_except_NGminip-tags.% \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-error-strings.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					$(GLT_DOWNCASE_FILTER)
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex  \
				@\"filters/make-optional-transitivity-tags.$*\"  \
			.o. @\"filters/make-optional-hyph-tags.$*\"          \
			.o. @\"filters/make-optional-semantic-tags.$*\"      \
			.o. @\"filters/make-optional-v1-tags.$*\"            \
			.o. @\"filters/make-optional-adv_comp-tags.$*\"      \
			.o. @\"filters/remove-area-tags.$*\"                 \
			.o. @\"filters/remove-dialect-tags.$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$*\"            \
			.o. @\"filters/remove-usage_except_NGminip-tags.$*\" \
			.o. @\"filters/remove-error-strings.$*\"             \
			.o. @\"filters/remove-orthography-tags.$*\"          \
			.o. @\"filters/remove-Orth_IPA-strings.$*\"          \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$*\"     \
			.o. @\"filters/remove-Use_minusGC-tags.$*\"          \
			.o. @\"filters/remove-Use_GC-strings.$*\"            \
			.o. @\"filters/remove-Use_PMatch-strings.$*\"        \
			.o. @\"filters/remove-mwe-tags.$*\"                  \
			.o. @\"$<\"                                          \
			    $(GLT_DOWNCASE_COMPOSE) \
			.o. @\"filters/remove-hyphenation-marks.$*\"         \
			.o. @\"filters/remove-infl_deriv-borders.$*\"        \
			.o. @\"filters/remove-word-boundary.$*\"             \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

###############################################################
# Additional targets to support multiple writing systems:

define giella_dict_alt_ws_fsts
analyser-dict-gt-desc.$(1).tmp.%: analyser-raw-gt-desc.%       \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-orig_lang-tags.%            \
					filters/remove-usage_except_NGminip-tags.% \
					filters/remove-semantic-tags.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/spellrelax.$(1).compose.%      \
					orthography/$$(DEFAULT_WS)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$$*\"                 \
			.o. @\"filters/remove-dialect-tags.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"            \
			.o. @\"filters/remove-usage_except_NGminip-tags.$$*\" \
			.o. @\"filters/remove-semantic-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"          \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"          \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"     \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"          \
			.o. @\"filters/remove-Use_GC-strings.$$*\"            \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"        \
			.o. @\"filters/remove-mwe-tags.$$*\"                  \
			.o. @\"$$<\"                                          \
			.o. @\"filters/remove-hyphenation-marks.$$*\"         \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"        \
			.o. @\"filters/remove-word-boundary.$$*\"             \
			.o. @\"orthography/$$(DEFAULT_WS)-to-$(1).compose.$$*\"\
			.o. @\"orthography/spellrelax.$(1).compose.$$*\"       \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-dict-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%      \
					filters/make-optional-hyph-tags.%          \
					filters/make-optional-transitivity-tags.%  \
					filters/make-optional-semantic-tags.%      \
					filters/make-optional-v1-tags.%            \
					filters/make-optional-adv_comp-tags.%      \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-orig_lang-tags.%            \
					filters/remove-usage_except_NGminip-tags.% \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-error-strings.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/$$(DEFAULT_WS)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\"  \
			.o. @\"filters/make-optional-hyph-tags.$$*\"          \
			.o. @\"filters/make-optional-semantic-tags.$$*\"      \
			.o. @\"filters/make-optional-v1-tags.$$*\"            \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"      \
			.o. @\"filters/remove-area-tags.$$*\"                 \
			.o. @\"filters/remove-dialect-tags.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"            \
			.o. @\"filters/remove-usage_except_NGminip-tags.$$*\" \
			.o. @\"filters/remove-error-strings.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"          \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"          \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"     \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"          \
			.o. @\"filters/remove-Use_GC-strings.$$*\"            \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"        \
			.o. @\"filters/remove-mwe-tags.$$*\"                  \
			.o. @\"$$<\"                                          \
			.o. @\"filters/remove-hyphenation-marks.$$*\"         \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"        \
			.o. @\"filters/remove-word-boundary.$$*\"             \
			.o. @\"orthography/$$(DEFAULT_WS)-to-$(1).compose.$$*\"\
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach altws,$(ALT_WSS),$(eval $(call giella_dict_alt_ws_fsts,$(altws))))

###############################################################
# Additional targets to support alternative orthographies:

define gla_dict_altorth_fsts
analyser-dict-gt-desc.$(1).tmp.%: analyser-raw-gt-desc.%       \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-orig_lang-tags.%            \
					filters/remove-usage_except_NGminip-tags.% \
					filters/remove-semantic-tags.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/spellrelax.$(1).compose.%      \
					orthography/raw-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"orthography/raw-to-$(1).compose.$$*\".i \
			.o. @\"filters/make-optional-transitivity-tags.$$*\"  \
			.o. @\"filters/remove-area-tags.$$*\"                 \
			.o. @\"filters/remove-dialect-tags.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"            \
			.o. @\"filters/remove-usage_except_NGminip-tags.$$*\" \
			.o. @\"filters/remove-semantic-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"          \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"          \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"     \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"          \
			.o. @\"filters/remove-Use_GC-strings.$$*\"            \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"        \
			.o. @\"filters/remove-mwe-tags.$$*\"                  \
			.o. @\"$$<\"                                          \
			.o. @\"filters/remove-hyphenation-marks.$$*\"         \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"        \
			.o. @\"filters/remove-word-boundary.$$*\"             \
			.o. @\"orthography/raw-to-$(1).compose.$$*\"          \
			.o. @\"orthography/spellrelax.$(1).compose.$$*\"      \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

analyser-dict-gt-desc.$(1).tmp.%: analyser-raw-gt-desc.%       \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-orig_lang-tags.%            \
					filters/remove-usage_except_NGminip-tags.% \
					filters/remove-semantic-tags.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/spellrelax.$(1).compose.%      \
					orthography/$(DEFAULT_ORTH)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"orthography/$$(DEFAULT_ORTH)-to-$(1).compose.$$*\".i \
			.o. @\"filters/make-optional-transitivity-tags.$$*\"  \
			.o. @\"filters/remove-area-tags.$$*\"                 \
			.o. @\"filters/remove-dialect-tags.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"            \
			.o. @\"filters/remove-usage_except_NGminip-tags.$$*\" \
			.o. @\"filters/remove-semantic-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"          \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"          \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"     \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"          \
			.o. @\"filters/remove-Use_GC-strings.$$*\"            \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"        \
			.o. @\"filters/remove-mwe-tags.$$*\"                  \
			.o. @\"$$<\"                                          \
			.o. @\"filters/remove-hyphenation-marks.$$*\"         \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"        \
			.o. @\"filters/remove-word-boundary.$$*\"             \
			.o. @\"orthography/$$(DEFAULT_ORTH)-to-$(1).compose.$$*\"\
			.o. @\"orthography/spellrelax.$(1).compose.$$*\"         \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-dict-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%      \
					filters/make-optional-hyph-tags.%          \
					filters/make-optional-transitivity-tags.%  \
					filters/make-optional-semantic-tags.%      \
					filters/make-optional-v1-tags.%            \
					filters/make-optional-adv_comp-tags.%      \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-orig_lang-tags.%            \
					filters/remove-usage_except_NGminip-tags.% \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-error-strings.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/$(DEFAULT_ORTH)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"orthography/$$(DEFAULT_ORTH)-to-$(1).compose.$$*\".i \
			.o. @\"filters/make-optional-transitivity-tags.$$*\"  \
			.o. @\"filters/make-optional-hyph-tags.$$*\"          \
			.o. @\"filters/make-optional-semantic-tags.$$*\"      \
			.o. @\"filters/make-optional-v1-tags.$$*\"            \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"      \
			.o. @\"filters/remove-area-tags.$$*\"                 \
			.o. @\"filters/remove-dialect-tags.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"            \
			.o. @\"filters/remove-usage_except_NGminip-tags.$$*\" \
			.o. @\"filters/remove-error-strings.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"          \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"          \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"     \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"          \
			.o. @\"filters/remove-Use_GC-strings.$$*\"            \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"        \
			.o. @\"filters/remove-mwe-tags.$$*\"                  \
			.o. @\"$$<\"                                          \
			.o. @\"filters/remove-hyphenation-marks.$$*\"         \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"        \
			.o. @\"filters/remove-word-boundary.$$*\"             \
			.o. @\"orthography/$$(DEFAULT_ORTH)-to-$(1).compose.$$*\"\
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-dict-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%      \
					filters/make-optional-hyph-tags.%          \
					filters/make-optional-transitivity-tags.%  \
					filters/make-optional-semantic-tags.%      \
					filters/make-optional-v1-tags.%            \
					filters/make-optional-adv_comp-tags.%      \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-orig_lang-tags.%            \
					filters/remove-usage_except_NGminip-tags.% \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-error-strings.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/raw-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"orthography/raw-to-$(1).compose.$$*\".i \
			.o. @\"filters/make-optional-transitivity-tags.$$*\"  \
			.o. @\"filters/make-optional-hyph-tags.$$*\"          \
			.o. @\"filters/make-optional-semantic-tags.$$*\"      \
			.o. @\"filters/make-optional-v1-tags.$$*\"            \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"      \
			.o. @\"filters/remove-area-tags.$$*\"                 \
			.o. @\"filters/remove-dialect-tags.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"            \
			.o. @\"filters/remove-usage_except_NGminip-tags.$$*\" \
			.o. @\"filters/remove-error-strings.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"          \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"          \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"     \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"          \
			.o. @\"filters/remove-Use_GC-strings.$$*\"            \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"        \
			.o. @\"filters/remove-mwe-tags.$$*\"                  \
			.o. @\"$$<\"                                          \
			.o. @\"filters/remove-hyphenation-marks.$$*\"         \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"        \
			.o. @\"filters/remove-word-boundary.$$*\"             \
			.o. @\"orthography/raw-to-$(1).compose.$$*\"\
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach altorth,$(ALT_ORTHS),$(eval $(call gla_dict_altorth_fsts,$(altorth))))

###############################################################
# Fallback target for mobile variants of the alternating orth, ws analysers:
define giella_dict_alt_ws_mobile_analysers
analyser-dict-gt-desc-mobile.%.tmp.$(1): analyser-dict-gt-desc.%.$(1)
	$$(AM_V_CP)cp -f $$< $$@
endef
$(foreach fst,hfst xfst foma,$(eval $(call giella_dict_alt_ws_mobile_analysers,$(fst))))

###############################################################
# Additional targets to support area / country specific fst's:

define giella_dict_area_fsts
generator-dict-gt-norm_$(1).tmp.%: analyser-raw-gt-desc.%      \
					filters/make-optional-hyph-tags.%          \
					filters/make-optional-transitivity-tags.%  \
					filters/make-optional-semantic-tags.%      \
					filters/make-optional-v1-tags.%            \
					filters/make-optional-adv_comp-tags.%      \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-orig_lang-tags.%            \
					filters/remove-usage_except_NGminip-tags.% \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-error-strings.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					filters/remove-all_areas_but_$(1)-strings.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\"  \
			.o. @\"filters/make-optional-hyph-tags.$$*\"          \
			.o. @\"filters/make-optional-semantic-tags.$$*\"      \
			.o. @\"filters/make-optional-v1-tags.$$*\"            \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"      \
			.o. @\"filters/remove-area-tags.$$*\"                 \
			.o. @\"filters/remove-dialect-tags.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"            \
			.o. @\"filters/remove-usage_except_NGminip-tags.$$*\" \
			.o. @\"filters/remove-error-strings.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"          \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"          \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"     \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"          \
			.o. @\"filters/remove-Use_GC-strings.$$*\"            \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"        \
			.o. @\"filters/remove-all_areas_but_$(1)-strings.$$*\"\
			.o. @\"filters/remove-mwe-tags.$$*\"                  \
			.o. @\"$$<\"                                          \
			.o. @\"filters/remove-hyphenation-marks.$$*\"         \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"        \
			.o. @\"filters/remove-word-boundary.$$*\"             \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach area,$(AREAS),$(eval $(call giella_dict_area_fsts,$(area))))

##### END Foma target list #####

# Disambiguation analysers. They differ from the
# regular analyser by NEITHER removing variant and homonym tags, NOR removing
# semantic tags or Err/Orth. The variant and homonym tags are there to help
# choosing forms, as are Err/Orth and Sem-tags.
analyser-disamb-gt-desc.tmp1.%: analyser-raw-gt-desc.%        \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-orthography-tags.%         \
					filters/remove-usage-tags.%               \
					filters/remove-variant-tags.%             \
					filters/block-mwe-compounds.%             \
					orthography/inituppercase.compose.%       \
					orthography/spellrelax.compose.%          \
					$(GLT_DOWNCASE_FILTER)
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/remove-usage-tags.$*\"               \
			.o. @\"filters/remove-variant-tags.$*\"             \
			.o. @\"filters/remove-orthography-tags.$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$*\"         \
			.o. @\"filters/block-mwe-compounds.$*\"             \
			.o. @\"$<\"                                         \
			    $(GLT_DOWNCASE_COMPOSE) \
			.o. @\"filters/remove-hyphenation-marks.$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$*\"       \
			.o. @\"filters/remove-word-boundary.$*\"            \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/inituppercase.compose.$*\"       \
			.o. @\"orthography/spellrelax.compose.$*\"          \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# Additional target to support languages with alternative writing systems:
define alt_ws_disamb_analysers
analyser-disamb-gt-desc.$(1).tmp1.%: analyser-raw-gt-desc.%     \
					filters/remove-Orth_IPA-strings.%           \
					filters/remove-hyphenation-marks.%          \
					filters/remove-infl_deriv-borders.%         \
					filters/remove-word-boundary.%              \
					filters/remove-orthography-tags.%           \
					filters/remove-usage-tags.%                 \
					filters/remove-variant-tags.%               \
					filters/block-mwe-compounds.%               \
					orthography/spellrelax.$(1).compose.%       \
					orthography/$(DEFAULT_WS)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-variant-tags.$$*\"               \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/block-mwe-compounds.$$*\"               \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/$(DEFAULT_WS)-to-$(1).compose.$$*\" \
			.o. @\"orthography/spellrelax.$(1).compose.$$*\"       \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach alt_ws,$(ALT_WSS),$(eval $(call alt_ws_disamb_analysers,$(alt_ws))))

# Additional target to support languages with alternative orthographies:
define alt_orth_disamb_fst
analyser-disamb-gt-desc.$(1).tmp1.%: analyser-raw-gt-desc.%      \
					filters/remove-hyphenation-marks.%           \
					filters/remove-infl_deriv-borders.%          \
					filters/remove-word-boundary.%               \
					filters/remove-orthography-tags.%            \
					filters/remove-usage-tags.%                  \
					filters/remove-variant-tags.%                \
					filters/remove-Orth_IPA-strings.%            \
					filters/block-mwe-compounds.%                \
					orthography/spellrelax.$(1).compose.%        \
					orthography/inituppercase.compose.%          \
					orthography/$(DEFAULT_ORTH)-to-$(1).compose.% \
					$(GLT_DOWNCASE_FILTER)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-orthography-tags.$$*\"             \
			.o. @\"filters/remove-usage-tags.$$*\"                   \
			.o. @\"filters/remove-variant-tags.$$*\"                 \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"             \
			.o. @\"filters/block-mwe-compounds.$$*\"                 \
			.o. @\"$$<\"                                             \
			    $(GLT_DOWNCASE_COMPOSE_DEF) \
			.o. @\"filters/remove-hyphenation-marks.$$*\"            \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"           \
			.o. @\"filters/remove-word-boundary.$$*\"                \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/$(DEFAULT_ORTH)-to-$(1).compose.$$*\" \
			.o. @\"orthography/spellrelax.$(1).compose.$$*\"         \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

# ... alternatively using a filter from RAW to target:
analyser-disamb-gt-desc.$(1).tmp1.%: analyser-raw-gt-desc.%      \
					filters/remove-hyphenation-marks.%           \
					filters/remove-infl_deriv-borders.%          \
					filters/remove-word-boundary.%               \
					filters/remove-orthography-tags.%            \
					filters/remove-usage-tags.%                  \
					filters/remove-variant-tags.%                \
					filters/remove-Orth_IPA-strings.%            \
					filters/block-mwe-compounds.%                \
					orthography/spellrelax.$(1).compose.%        \
					orthography/inituppercase.compose.%          \
					orthography/raw-to-$(1).compose.%            \
					$(GLT_DOWNCASE_FILTER)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-orthography-tags.$$*\"             \
			.o. @\"filters/remove-usage-tags.$$*\"                   \
			.o. @\"filters/remove-variant-tags.$$*\"                 \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"             \
			.o. @\"filters/block-mwe-compounds.$$*\"                 \
			.o. @\"$$<\"                                             \
			    $(GLT_DOWNCASE_COMPOSE_DEF) \
			.o. @\"filters/remove-hyphenation-marks.$$*\"            \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"           \
			.o. @\"filters/remove-word-boundary.$$*\"                \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/raw-to-$(1).compose.$$*\"             \
			.o. @\"orthography/spellrelax.$(1).compose.$$*\"         \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach alt_orth,$(ALT_ORTHS),$(eval $(call alt_orth_disamb_fst,$(alt_orth))))

# As a separate last step we remove everything that is related to pmatch, when
# building the regular disamb analyser:
define disambs
analyser-disamb-gt-desc%tmp.$(1): analyser-disamb-gt-desc%tmp1.$(1) \
					 filters/remove-Use_minusGC-tags.$(1)      \
					 filters/remove-Use_GC-strings.$(1)        \
					 filters/remove-Use_minus_PMatch-tags.$(1) \
					 filters/remove-Use_PMatch-strings.$(1)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-Use_minus_PMatch-tags.$(1)\"  \
			.o. @\"filters/remove-Use_minusGC-tags.$(1)\"       \
			.o. @\"filters/remove-Use_GC-strings.$(1)\"         \
			.o. @\"filters/remove-Use_PMatch-strings.$(1)\"     \
			.o. @\"$$<\"                                        \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach fst,hfst xfst foma,$(eval $(call disambs,$(fst))))

# We build a special variant of the disamb analyser for use with pmatch, where
# the only diff from regular disamb is that we have removed strings and tags
# not relevant to the pmatch version (and kept the pmatch counterpart w/o tags):
define pmatch_disambs
analyser-pmatchdisamb-gt-desc%tmp.$(1): analyser-disamb-gt-desc%tmp1.$(1) \
					 filters/remove-Use_minusGC-tags.$(1)         \
					 filters/remove-Use_GC-strings.$(1)           \
					 filters/remove-Use_minus_PMatch-strings.$(1) \
					 filters/remove-Use_PMatch-tags.$(1)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-Use_PMatch-tags.$(1)\"          \
			.o. @\"filters/remove-Use_minusGC-tags.$(1)\"         \
			.o. @\"filters/remove-Use_GC-strings.$(1)\"           \
			.o. @\"filters/remove-Use_minus_PMatch-strings.$(1)\" \
			.o. @\"$$<\"                                          \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach fst,hfst xfst foma,$(eval $(call pmatch_disambs,$(fst))))

##################################################
######## Build rules for Xerox and HFST: #########

# analyser-oahpa-gt-norm - only used for testing in parallel with the generator
# Require:
# * homonym tags: Hom1, Hom2 (ie don't remove)  - done
# Optionally allow these tags:
# * transitivity tags: IV, TV,                  - done
# * variant tags: v1, v2, v3, v4, v5,           - done
# * generation restriction tags: Use/NGminip    - not implemented

# Build the normative Oahpa analyser as a complement to the generator:
analyser-oahpa-gt-norm.tmp.%: analyser-raw-gt-desc.%          \
					filters/remove-area-tags.%                \
					filters/remove-dialect-tags.%             \
					filters/remove-orig_lang-tags.%           \
					filters/remove-usage-tags.%               \
					filters/remove-semantic-tags.%            \
					filters/remove-hyphenation-marks.%        \
					filters/remove-error-strings.%            \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-orthography-tags.%         \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					filters/remove-mwe-tags.%                 \
					orthography/inituppercase.compose.%       \
					orthography/spellrelax.compose.%          \
					$(GLT_DOWNCASE_FILTER)
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/remove-dialect-tags.$*\"             \
			.o. @\"filters/remove-orig_lang-tags.$*\"           \
			.o. @\"filters/remove-usage-tags.$*\"               \
			.o. @\"filters/remove-error-strings.$*\"            \
			.o. @\"filters/remove-semantic-tags.$*\"            \
			.o. @\"filters/remove-orthography-tags.$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$*\"         \
			.o. @\"filters/remove-area-tags.$*\"                \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$*\"       \
			.o. @\"filters/remove-mwe-tags.$*\"                 \
			.o. @\"$<\" \
			    $(GLT_DOWNCASE_COMPOSE) \
			.o. @\"filters/remove-hyphenation-marks.$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$*\"       \
			.o. @\"filters/remove-word-boundary.$*\"            \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/inituppercase.compose.$*\"       \
			.o. @\"orthography/spellrelax.compose.$*\"          \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# oahpa-norm / generator-oahpa-gt-norm
# Require:
# * homonym tags: Hom1, Hom2 (ie don't remove)  - done
# Optionally allow these tags:
# * transitivity tags: IV, TV,                  - done
# * variant tags: v1, v2, v3, v4, v5,           - done
# * generation restriction tags: Use/NGminip    - not implemented

# Build the general normative Oahpa generator:
generator-oahpa-gt-norm.tmp.%: analyser-raw-gt-desc.%         \
					filters/make-optional-hyph-tags.%         \
					filters/make-optional-transitivity-tags.% \
					filters/make-optional-variant-tags.%      \
					filters/make-optional-semantic-tags.%     \
					filters/make-optional-NGminip-tags.%      \
					filters/make-optional-adv_comp-tags.%     \
					filters/remove-area-tags.%                \
					filters/remove-dialect-tags.%             \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-number-string-tags.%       \
					filters/remove-usage-tags.%               \
					filters/remove-orthography-tags.%         \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-orig_lang-tags.%           \
					filters/remove-error-strings.%            \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					filters/remove-mwe-tags.%                 \
					$(GLT_DOWNCASE_FILTER)
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$*\" \
			.o. @\"filters/make-optional-hyph-tags.$*\"         \
			.o. @\"filters/make-optional-variant-tags.$*\"      \
			.o. @\"filters/make-optional-semantic-tags.$*\"     \
			.o. @\"filters/make-optional-NGminip-tags.$*\"      \
			.o. @\"filters/make-optional-adv_comp-tags.$*\"     \
			.o. @\"filters/remove-dialect-tags.$*\"             \
			.o. @\"filters/remove-number-string-tags.$*\"       \
			.o. @\"filters/remove-area-tags.$*\"                \
			.o. @\"filters/remove-usage-tags.$*\"               \
			.o. @\"filters/remove-error-strings.$*\"            \
			.o. @\"filters/remove-orig_lang-tags.$*\"           \
			.o. @\"filters/remove-orthography-tags.$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$*\"       \
			.o. @\"filters/remove-mwe-tags.$*\"                 \
			.o. @\"$<\"                                         \
			    $(GLT_DOWNCASE_COMPOSE) \
			.o. @\"filters/remove-hyphenation-marks.$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$*\"       \
			.o. @\"filters/remove-word-boundary.$*\"            \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# Build the dialect-targeted normative Oahpa generator -
# the dialects are defined in configure.ac:
define dial_oahpa_generators
generator-oahpa-gt-norm-dial_$(1).tmp.%: analyser-raw-gt-desc.%    \
					filters/remove-all_dialects_but_$(1)-strings.% \
					filters/make-optional-hyph-tags.%              \
					filters/make-optional-transitivity-tags.%      \
					filters/make-optional-variant-tags.%           \
					filters/make-optional-semantic-tags.%          \
					filters/make-optional-adv_comp-tags.%          \
					filters/remove-area-tags.%                     \
					filters/remove-dialect-tags.%                  \
					filters/remove-hyphenation-marks.%             \
					filters/remove-infl_deriv-borders.%            \
					filters/remove-word-boundary.%                 \
					filters/remove-number-string-tags.%            \
					filters/remove-usage-tags.%                    \
					filters/remove-orthography-tags.%              \
					filters/remove-Orth_IPA-strings.%              \
					filters/remove-orig_lang-tags.%                \
					filters/remove-NG-strings.%                    \
					filters/remove-error-strings.%                 \
					filters/remove-Use_minusGC-tags.%              \
					filters/remove-Use_GC-strings.%                \
					filters/remove-Use_minus_PMatch-tags.%         \
					filters/remove-Use_PMatch-strings.%            \
					filters/remove-mwe-tags.%                      \
					$(GLT_DOWNCASE_FILTER)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\"     \
			.o. @\"filters/make-optional-hyph-tags.$$*\"             \
			.o. @\"filters/make-optional-variant-tags.$$*\"          \
			.o. @\"filters/make-optional-semantic-tags.$$*\"         \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"         \
			.o. @\"filters/remove-area-tags.$$*\"                    \
			.o. @\"filters/remove-dialect-tags.$$*\"                 \
			.o. @\"filters/remove-number-string-tags.$$*\"           \
			.o. @\"filters/remove-usage-tags.$$*\"                   \
			.o. @\"filters/remove-error-strings.$$*\"                \
			.o. @\"filters/remove-orig_lang-tags.$$*\"               \
			.o. @\"filters/remove-orthography-tags.$$*\"             \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"             \
			.o. @\"filters/remove-NG-strings.$$*\"                   \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"        \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"             \
			.o. @\"filters/remove-Use_GC-strings.$$*\"               \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"           \
			.o. @\"filters/remove-mwe-tags.$$*\"                     \
			.o. @\"filters/remove-all_dialects_but_$(1)-strings.$$*\"\
			.o. @\"$$<\"                                             \
			    $(GLT_DOWNCASE_COMPOSE_DEF) \
			.o. @\"filters/remove-hyphenation-marks.$$*\"            \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"           \
			.o. @\"filters/remove-word-boundary.$$*\"                \
			;\n\
		save stack $$@\n\
		quit\n" | $$(XFST_TOOL)
endef
$(foreach dialect,$(DIALECTS),$(eval $(call dial_oahpa_generators,$(dialect))))

# The "raw" transducer contains all tags and symbols available on the analysis
# side. Some of them are optional for generation, some are only needed for
# special tools. On the lower side, the raw transducer contains all
# morphological boundaries and hyphenation symbols. As such, this transducer
# can NOT be used for morphological analysis, and hardly for generation.

# First build a tmp1 raw file as the intersection between lexicon and rules:
# This raw error/L2 lexical transducer uses both L2 lexicon and L2 twolc:
generator-raw-gt-%.tmp1.hfst: fst/lexicon-%.hfst \
					 fst/phonology-%.compose.hfst
	$(AM_V_INTRSCT)$(HFST_COMPOSE_INTERSECT) $(MORE_VERBOSITY) $(HFST_FLAGS) \
		-1 fst/lexicon-$*.hfst \
		-2 fst/phonology-$*.compose.hfst |\
		$(HFST_MINIMIZE) $(HFST_FLAGS) -o $@

# This is an alternative error fst for cases where the L2 phonology file is not
# available (because of configuration or no source file):
generator-raw-gt-%.tmp1.hfst: fst/lexicon-%.hfst \
					 fst/phonology.compose.hfst
	$(AM_V_INTRSCT)$(HFST_COMPOSE_INTERSECT) $(MORE_VERBOSITY) $(HFST_FLAGS) \
		-1 fst/lexicon-$*.hfst \
		-2 fst/phonology.compose.hfst |\
		$(HFST_MINIMIZE) $(HFST_FLAGS) -o $@

# The same for Xerox:
analyser-raw-gt-%.tmp1.xfst: fst/lexicon-%.xfst \
			 fst/phonology-%.compose.xfst
	$(AM_V_LEXC)$(PRINTF) \
		"read-source fst/lexicon-$*.xfst\nread-rules fst/phonology-$*.compose.xfst\ncompose-result\nsave-result $@\nquit\n" \
		| $(LEXC) $(VERBOSITY)

analyser-raw-gt-%.tmp1.xfst: fst/lexicon-%.xfst \
			 fst/phonology.compose.xfst
	$(AM_V_LEXC)$(PRINTF) \
		"read-source fst/lexicon-$*.xfst\nread-rules fst/phonology.compose.xfst\ncompose-result\nsave-result $@\nquit\n" \
		| $(LEXC) $(VERBOSITY)

# FOMA
analyser-raw-gt-%.tmp1.foma: fst/lexicon-%.foma \
			 fst/phonology-%.compose.foma
	$(AM_V_FOMA)$(PRINTF) \
		"read regex \
				@\"$<\" \
			.o. @\"fst/phonology-$*.compose.foma\" \
			; \n\
		 save stack $@\n\
		 quit\n" \
		| $(FOMA) $(VERBOSITY)

analyser-raw-gt-%.tmp1.foma: fst/lexicon-%.foma \
			 fst/phonology.compose.foma
	$(AM_V_FOMA)$(PRINTF) \
		"read regex \
				@\"$<\" \
			.o. @\"fst/phonology.compose.foma\" \
			; \n\
		 save stack $@\n\
		 quit\n" \
		| $(FOMA) $(VERBOSITY)

# ... then apply tag reordering to tmp1 to ensure the same tag order in all
# subsequent processing; this creates the regular tmp file, which can further
# get local processing to produce the final raw file:
# Hfst makes a generator (wrt lookup):
generator-raw-gt-error.tmp.%: generator-raw-gt-L2.tmp1.%  \
					filters/reorder-semantic-tags.%           \
					filters/reorder-subpos-tags.%         \
					filters/remove-mwe-tags.%
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/reorder-subpos-tags.$*\"   \
			.o. @\"filters/reorder-semantic-tags.$*\" \
			.o. @\"filters/remove-mwe-tags.$*\"       \
			.o. @\"$<\" \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# Just cp the generator-*.hfst to the corresponding analyser, to make it
# possible to share build code between Hfst and Xerox/Foma:
analyser-raw-gt-error.hfst: generator-raw-gt-error.hfst
	$(AM_V_CP)cp $< $@

# Xerox & Foma make analysers (wrt lookup):
analyser-raw-gt-error.tmp.%: analyser-raw-gt-L2.tmp1.%  \
					filters/reorder-semantic-tags.%           \
					filters/reorder-subpos-tags.%         \
					filters/remove-mwe-tags.%
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/reorder-subpos-tags.$*\"   \
			.o. @\"filters/reorder-semantic-tags.$*\" \
			.o. @\"filters/remove-mwe-tags.$*\"       \
			.o. @\"$<\" \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# Build the descriptive Oahpa analyser with extra error tags:
analyser-oahpa-gt-error.tmp.%: analyser-raw-gt-error.%     \
					filters/remove-area-tags.%                \
					filters/remove-dialect-tags.%             \
					filters/remove-orig_lang-tags.%           \
					filters/remove-usage-tags.%               \
					filters/remove-semantic-tags.%            \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-orthography-tags.%         \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					filters/remove-mwe-tags.%                 \
					orthography/inituppercase.compose.%       \
					orthography/spellrelax.compose.%          \
					$(GLT_DOWNCASE_FILTER)
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$*\"                \
			.o. @\"filters/remove-dialect-tags.$*\"             \
			.o. @\"filters/remove-orig_lang-tags.$*\"           \
			.o. @\"filters/remove-usage-tags.$*\"               \
			.o. @\"filters/remove-semantic-tags.$*\"            \
			.o. @\"filters/remove-orthography-tags.$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$*\"       \
			.o. @\"filters/remove-mwe-tags.$*\"                 \
			.o. @\"$<\" \
			    $(GLT_DOWNCASE_COMPOSE) \
			.o. @\"filters/remove-hyphenation-marks.$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$*\"       \
			.o. @\"filters/remove-word-boundary.$*\"            \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/inituppercase.compose.$*\"       \
			.o. @\"orthography/spellrelax.compose.$*\"          \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# Build an error fst that also recognises initial case error for place names:
analyser-oahpa-gt-downcaseerror.tmp.%: analyser-oahpa-gt-error.tmp.% \
					filters/downcase_UCletters.%      \
					filters/extract-Sem_Plc-strings.% \
					filters/tag-lowercase_error-strings.%
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
			[ [   @\"filters/tag-lowercase_error-strings.$*\" \
			  .o. @\"filters/extract-Sem_Plc-strings.$*\"     \
			  .o. @\"$<\" \
			  ] \
			  .o. @\"filters/downcase_UCletters.$*\"          \
			] \
			|   @\"$<\" \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

###############################################################
# Additional targets to support multiple writing systems:

define oahpa_alt_ws_fsts
analyser-oahpa-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%  \
					filters/remove-area-tags.%             \
					filters/remove-dialect-tags.%          \
					filters/remove-orig_lang-tags.%        \
					filters/remove-usage-tags.%            \
					filters/remove-semantic-tags.%         \
					filters/remove-hyphenation-marks.%     \
					filters/remove-error-strings.%         \
					filters/remove-infl_deriv-borders.%    \
					filters/remove-word-boundary.%         \
					filters/remove-orthography-tags.%      \
					filters/remove-Orth_IPA-strings.%      \
					filters/remove-Use_minusGC-tags.%      \
					filters/remove-Use_GC-strings.%        \
					filters/remove-Use_minus_PMatch-tags.% \
					filters/remove-Use_PMatch-strings.%    \
					filters/remove-mwe-tags.%              \
					orthography/spellrelax.$(1).compose.%  \
					orthography/$$(DEFAULT_WS)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$$*\"                \
			.o. @\"filters/remove-dialect-tags.$$*\"             \
			.o. @\"filters/remove-orig_lang-tags.$$*\"           \
			.o. @\"filters/remove-usage-tags.$$*\"               \
			.o. @\"filters/remove-error-strings.$$*\"            \
			.o. @\"filters/remove-semantic-tags.$$*\"            \
			.o. @\"filters/remove-orthography-tags.$$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"       \
			.o. @\"filters/remove-mwe-tags.$$*\"                 \
			.o. @\"$$<\"                                         \
			.o. @\"filters/remove-hyphenation-marks.$$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"       \
			.o. @\"filters/remove-word-boundary.$$*\"            \
			.o. @\"orthography/$$(DEFAULT_WS)-to-$(1).compose.$$*\"\
			.o. @\"orthography/spellrelax.$(1).compose.$$*\"       \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-oahpa-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%    \
					filters/make-optional-hyph-tags.%         \
					filters/make-optional-transitivity-tags.% \
					filters/make-optional-variant-tags.%      \
					filters/make-optional-semantic-tags.%     \
					filters/make-optional-NGminip-tags.%      \
					filters/make-optional-adv_comp-tags.%     \
					filters/remove-area-tags.%                \
					filters/remove-dialect-tags.%             \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-number-string-tags.%       \
					filters/remove-usage-tags.%               \
					filters/remove-orthography-tags.%         \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-orig_lang-tags.%           \
					filters/remove-error-strings.%            \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					filters/remove-mwe-tags.%                 \
					orthography/$$(DEFAULT_WS)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\" \
			.o. @\"filters/make-optional-hyph-tags.$$*\"         \
			.o. @\"filters/make-optional-variant-tags.$$*\"      \
			.o. @\"filters/make-optional-semantic-tags.$$*\"     \
			.o. @\"filters/make-optional-NGminip-tags.$$*\"      \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"     \
			.o. @\"filters/remove-area-tags.$$*\"                \
			.o. @\"filters/remove-dialect-tags.$$*\"             \
			.o. @\"filters/remove-number-string-tags.$$*\"       \
			.o. @\"filters/remove-usage-tags.$$*\"               \
			.o. @\"filters/remove-error-strings.$$*\"            \
			.o. @\"filters/remove-orig_lang-tags.$$*\"           \
			.o. @\"filters/remove-orthography-tags.$$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"       \
			.o. @\"filters/remove-mwe-tags.$$*\"                 \
			.o. @\"$$<\"                                         \
			.o. @\"filters/remove-hyphenation-marks.$$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"       \
			.o. @\"filters/remove-word-boundary.$$*\"            \
			.o. @\"orthography/$$(DEFAULT_WS)-to-$(1).compose.$$*\"\
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach altws,$(ALT_WSS),$(eval $(call oahpa_alt_ws_fsts,$(altws))))

###############################################################
# Additional targets to support alternative orthographies:

define oahpa_alt_orth_fsts
analyser-oahpa-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%  \
					filters/remove-area-tags.%             \
					filters/remove-dialect-tags.%          \
					filters/remove-orig_lang-tags.%        \
					filters/remove-usage-tags.%            \
					filters/remove-semantic-tags.%         \
					filters/remove-hyphenation-marks.%     \
					filters/remove-error-strings.%         \
					filters/remove-infl_deriv-borders.%    \
					filters/remove-word-boundary.%         \
					filters/remove-orthography-tags.%      \
					filters/remove-Orth_IPA-strings.%      \
					filters/remove-Use_minusGC-tags.%      \
					filters/remove-Use_GC-strings.%        \
					filters/remove-Use_minus_PMatch-tags.% \
					filters/remove-Use_PMatch-strings.%    \
					filters/remove-mwe-tags.%              \
					orthography/spellrelax.$(1).compose.%  \
					orthography/$$(DEFAULT_ORTH)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$$*\"                \
			.o. @\"filters/remove-dialect-tags.$$*\"             \
			.o. @\"filters/remove-orig_lang-tags.$$*\"           \
			.o. @\"filters/remove-usage-tags.$$*\"               \
			.o. @\"filters/remove-error-strings.$$*\"            \
			.o. @\"filters/remove-semantic-tags.$$*\"            \
			.o. @\"filters/remove-orthography-tags.$$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"       \
			.o. @\"filters/remove-mwe-tags.$$*\"                 \
			.o. @\"$$<\"                                         \
			.o. @\"filters/remove-hyphenation-marks.$$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"       \
			.o. @\"filters/remove-word-boundary.$$*\"            \
			.o. @\"orthography/$$(DEFAULT_ORTH)-to-$(1).compose.$$*\"\
			.o. @\"orthography/spellrelax.$(1).compose.$$*\"         \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

analyser-oahpa-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%  \
					filters/remove-area-tags.%             \
					filters/remove-dialect-tags.%          \
					filters/remove-orig_lang-tags.%        \
					filters/remove-usage-tags.%            \
					filters/remove-semantic-tags.%         \
					filters/remove-hyphenation-marks.%     \
					filters/remove-error-strings.%         \
					filters/remove-infl_deriv-borders.%    \
					filters/remove-word-boundary.%         \
					filters/remove-orthography-tags.%      \
					filters/remove-Orth_IPA-strings.%      \
					filters/remove-Use_minusGC-tags.%      \
					filters/remove-Use_GC-strings.%        \
					filters/remove-Use_minus_PMatch-tags.% \
					filters/remove-Use_PMatch-strings.%    \
					filters/remove-mwe-tags.%              \
					orthography/spellrelax.$(1).compose.%  \
					orthography/raw-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$$*\"            \
			.o. @\"filters/remove-dialect-tags.$$*\"         \
			.o. @\"filters/remove-orig_lang-tags.$$*\"       \
			.o. @\"filters/remove-usage-tags.$$*\"           \
			.o. @\"filters/remove-error-strings.$$*\"        \
			.o. @\"filters/remove-semantic-tags.$$*\"        \
			.o. @\"filters/remove-orthography-tags.$$*\"     \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"     \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"\
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"     \
			.o. @\"filters/remove-Use_GC-strings.$$*\"       \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"   \
			.o. @\"filters/remove-mwe-tags.$$*\"             \
			.o. @\"$$<\"                                     \
			.o. @\"filters/remove-hyphenation-marks.$$*\"    \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"   \
			.o. @\"filters/remove-word-boundary.$$*\"        \
			.o. @\"orthography/raw-to-$(1).compose.$$*\"     \
			.o. @\"orthography/spellrelax.$(1).compose.$$*\" \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-oahpa-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%    \
					filters/make-optional-hyph-tags.%         \
					filters/make-optional-transitivity-tags.% \
					filters/make-optional-variant-tags.%      \
					filters/make-optional-semantic-tags.%     \
					filters/make-optional-NGminip-tags.%      \
					filters/make-optional-adv_comp-tags.%     \
					filters/remove-area-tags.%                \
					filters/remove-dialect-tags.%             \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-number-string-tags.%       \
					filters/remove-usage-tags.%               \
					filters/remove-orthography-tags.%         \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-orig_lang-tags.%           \
					filters/remove-error-strings.%            \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					filters/remove-mwe-tags.%                 \
					orthography/$$(DEFAULT_ORTH)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\" \
			.o. @\"filters/make-optional-hyph-tags.$$*\"         \
			.o. @\"filters/make-optional-variant-tags.$$*\"      \
			.o. @\"filters/make-optional-semantic-tags.$$*\"     \
			.o. @\"filters/make-optional-NGminip-tags.$$*\"      \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"     \
			.o. @\"filters/remove-area-tags.$$*\"                \
			.o. @\"filters/remove-dialect-tags.$$*\"             \
			.o. @\"filters/remove-number-string-tags.$$*\"       \
			.o. @\"filters/remove-usage-tags.$$*\"               \
			.o. @\"filters/remove-error-strings.$$*\"            \
			.o. @\"filters/remove-orig_lang-tags.$$*\"           \
			.o. @\"filters/remove-orthography-tags.$$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"       \
			.o. @\"filters/remove-mwe-tags.$$*\"                 \
			.o. @\"$$<\"                                         \
			.o. @\"filters/remove-hyphenation-marks.$$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"       \
			.o. @\"filters/remove-word-boundary.$$*\"            \
			.o. @\"orthography/$$(DEFAULT_ORTH)-to-$(1).compose.$$*\"\
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-oahpa-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%    \
					filters/make-optional-hyph-tags.%         \
					filters/make-optional-transitivity-tags.% \
					filters/make-optional-variant-tags.%      \
					filters/make-optional-semantic-tags.%     \
					filters/make-optional-NGminip-tags.%      \
					filters/make-optional-adv_comp-tags.%     \
					filters/remove-area-tags.%                \
					filters/remove-dialect-tags.%             \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-number-string-tags.%       \
					filters/remove-usage-tags.%               \
					filters/remove-orthography-tags.%         \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-orig_lang-tags.%           \
					filters/remove-error-strings.%            \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					filters/remove-mwe-tags.%                 \
					orthography/raw-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\" \
			.o. @\"filters/make-optional-hyph-tags.$$*\"         \
			.o. @\"filters/make-optional-variant-tags.$$*\"      \
			.o. @\"filters/make-optional-semantic-tags.$$*\"     \
			.o. @\"filters/make-optional-NGminip-tags.$$*\"      \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"     \
			.o. @\"filters/remove-area-tags.$$*\"                \
			.o. @\"filters/remove-dialect-tags.$$*\"             \
			.o. @\"filters/remove-number-string-tags.$$*\"       \
			.o. @\"filters/remove-usage-tags.$$*\"               \
			.o. @\"filters/remove-error-strings.$$*\"            \
			.o. @\"filters/remove-orig_lang-tags.$$*\"           \
			.o. @\"filters/remove-orthography-tags.$$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"       \
			.o. @\"filters/remove-mwe-tags.$$*\"                 \
			.o. @\"$$<\"                                         \
			.o. @\"filters/remove-hyphenation-marks.$$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"       \
			.o. @\"filters/remove-word-boundary.$$*\"            \
			.o. @\"orthography/raw-to-$(1).compose.$$*\"         \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach altorth,$(ALT_ORTHS),$(eval $(call oahpa_alt_orth_fsts,$(altorth))))

###############################################################
# Additional targets to support area / country specific fst's:

define oahpa_area_fsts
analyser-oahpa-gt-norm_$(1).tmp.%: analyser-raw-gt-desc.%  \
					filters/remove-area-tags.%             \
					filters/remove-dialect-tags.%          \
					filters/remove-orig_lang-tags.%        \
					filters/remove-usage-tags.%            \
					filters/remove-semantic-tags.%         \
					filters/remove-hyphenation-marks.%     \
					filters/remove-error-strings.%         \
					filters/remove-infl_deriv-borders.%    \
					filters/remove-word-boundary.%         \
					filters/remove-orthography-tags.%      \
					filters/remove-Orth_IPA-strings.%      \
					filters/remove-Use_minusGC-tags.%      \
					filters/remove-Use_GC-strings.%        \
					filters/remove-Use_minus_PMatch-tags.% \
					filters/remove-Use_PMatch-strings.%    \
					filters/remove-mwe-tags.%              \
					filters/remove-all_areas_but_$(1)-strings.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$$*\"                \
			.o. @\"filters/remove-dialect-tags.$$*\"             \
			.o. @\"filters/remove-orig_lang-tags.$$*\"           \
			.o. @\"filters/remove-usage-tags.$$*\"               \
			.o. @\"filters/remove-error-strings.$$*\"            \
			.o. @\"filters/remove-semantic-tags.$$*\"            \
			.o. @\"filters/remove-orthography-tags.$$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"       \
			.o. @\"filters/remove-all_areas_but_$(1)-strings.$$*\"\
			.o. @\"filters/remove-mwe-tags.$$*\"                 \
			.o. @\"$$<\"                                         \
			.o. @\"filters/remove-hyphenation-marks.$$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"       \
			.o. @\"filters/remove-word-boundary.$$*\"            \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-oahpa-gt-norm_$(1).tmp.%: analyser-raw-gt-desc.%    \
					filters/make-optional-hyph-tags.%         \
					filters/make-optional-transitivity-tags.% \
					filters/make-optional-variant-tags.%      \
					filters/make-optional-semantic-tags.%     \
					filters/make-optional-NGminip-tags.%      \
					filters/make-optional-adv_comp-tags.%     \
					filters/remove-area-tags.%                \
					filters/remove-dialect-tags.%             \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-number-string-tags.%       \
					filters/remove-usage-tags.%               \
					filters/remove-orthography-tags.%         \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-orig_lang-tags.%           \
					filters/remove-error-strings.%            \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					filters/remove-mwe-tags.%                 \
					filters/remove-all_areas_but_$(1)-strings.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\" \
			.o. @\"filters/make-optional-hyph-tags.$$*\"         \
			.o. @\"filters/make-optional-variant-tags.$$*\"      \
			.o. @\"filters/make-optional-semantic-tags.$$*\"     \
			.o. @\"filters/make-optional-NGminip-tags.$$*\"      \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"     \
			.o. @\"filters/remove-area-tags.$$*\"                \
			.o. @\"filters/remove-dialect-tags.$$*\"             \
			.o. @\"filters/remove-number-string-tags.$$*\"       \
			.o. @\"filters/remove-usage-tags.$$*\"               \
			.o. @\"filters/remove-error-strings.$$*\"            \
			.o. @\"filters/remove-orig_lang-tags.$$*\"           \
			.o. @\"filters/remove-orthography-tags.$$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"       \
			.o. @\"filters/remove-all_areas_but_$(1)-strings.$$*\"\
			.o. @\"filters/remove-mwe-tags.$$*\"                 \
			.o. @\"$$<\"                                         \
			.o. @\"filters/remove-hyphenation-marks.$$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"       \
			.o. @\"filters/remove-word-boundary.$$*\"            \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach area,$(AREAS),$(eval $(call oahpa_area_fsts,$(area))))
##### END Foma target list #####

####### Build rules for the default set of fst's for  ########
####### areal variation reflected in the orthography: ########
define area_fsts
analyser-gt-norm_$(1).tmp.%: analyser-raw-gt-desc.%            \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-variant-tags.%              \
					filters/remove-number-string-tags.%        \
					filters/remove-usage-tags.%                \
					filters/remove-error-strings.%             \
					filters/remove-semantic-tags.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					filters/remove-all_areas_but_$(1)-strings.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-variant-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-semantic-tags.$$*\"              \
			.o. @\"filters/remove-error-strings.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-all_areas_but_$(1)-strings.$$*\" \
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-gt-norm_$(1).tmp.%: analyser-raw-gt-desc.%           \
					filters/make-optional-transitivity-tags.%  \
					filters/make-optional-homonymy-tags.%      \
					filters/make-optional-hyph-tags.%          \
					filters/make-optional-variant-tags.%       \
					filters/make-optional-semantic-tags.%      \
					filters/make-optional-adv_comp-tags.%      \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-number-string-tags.%        \
					filters/remove-usage-tags.%                \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-error-strings.%             \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					filters/remove-all_areas_but_$(1)-strings.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\"   \
			.o. @\"filters/make-optional-homonymy-tags.$$*\"       \
			.o. @\"filters/make-optional-hyph-tags.$$*\"           \
			.o. @\"filters/make-optional-variant-tags.$$*\"        \
			.o. @\"filters/make-optional-semantic-tags.$$*\"       \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"       \
			.o. @\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-error-strings.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-all_areas_but_$(1)-strings.$$*\" \
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach area,$(AREAS),$(eval $(call area_fsts,$(area))))
##### END Foma target list #####

####### Build rules for the default set of fst's for ########
####### alternate writing systems:                   ########
define alt_ws_fsts
analyser-gt-desc.$(1).tmp.%: analyser-raw-gt-desc.%            \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-number-string-tags.%        \
					filters/remove-usage-tags.%                \
					filters/remove-semantic-tags.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/spellrelax.$(1).compose.%      \
					orthography/$(DEFAULT_WS)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-semantic-tags.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			.o. @\"orthography/$(DEFAULT_WS)-to-$(1).compose.$$*\" \
			.o. @\"orthography/spellrelax.$(1).compose.$$*\"       \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

analyser-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%            \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-variant-tags.%              \
					filters/remove-number-string-tags.%        \
					filters/remove-usage-tags.%                \
					filters/remove-error-strings.%             \
					filters/remove-semantic-tags.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/$(DEFAULT_WS)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-variant-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-semantic-tags.$$*\"              \
			.o. @\"filters/remove-error-strings.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			.o. @\"orthography/$(DEFAULT_WS)-to-$(1).compose.$$*\" \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-gt-desc.$(1).tmp.%: analyser-raw-gt-desc.%           \
					filters/make-optional-transitivity-tags.%  \
					filters/make-optional-homonymy-tags.%      \
					filters/make-optional-hyph-tags.%          \
					filters/make-optional-variant-tags.%       \
					filters/make-optional-semantic-tags.%      \
					filters/make-optional-error-tags.%         \
					filters/make-optional-adv_comp-tags.%      \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-number-string-tags.%        \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-usage-tags.%                \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/$(DEFAULT_WS)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\"   \
			.o. @\"filters/make-optional-homonymy-tags.$$*\"       \
			.o. @\"filters/make-optional-hyph-tags.$$*\"           \
			.o. @\"filters/make-optional-variant-tags.$$*\"        \
			.o. @\"filters/make-optional-semantic-tags.$$*\"       \
			.o. @\"filters/make-optional-error-tags.$$*\"          \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"       \
			.o. @\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			.o. @\"orthography/$(DEFAULT_WS)-to-$(1).compose.$$*\" \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%           \
					filters/make-optional-transitivity-tags.%  \
					filters/make-optional-homonymy-tags.%      \
					filters/make-optional-hyph-tags.%          \
					filters/make-optional-variant-tags.%       \
					filters/make-optional-semantic-tags.%      \
					filters/make-optional-adv_comp-tags.%      \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-number-string-tags.%        \
					filters/remove-usage-tags.%                \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-error-strings.%             \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/$(DEFAULT_WS)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\"   \
			.o. @\"filters/make-optional-homonymy-tags.$$*\"       \
			.o. @\"filters/make-optional-hyph-tags.$$*\"           \
			.o. @\"filters/make-optional-variant-tags.$$*\"        \
			.o. @\"filters/make-optional-semantic-tags.$$*\"       \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"       \
			.o. @\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-error-strings.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			.o. @\"orthography/$(DEFAULT_WS)-to-$(1).compose.$$*\" \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach alt_ws,$(ALT_WSS),$(eval $(call alt_ws_fsts,$(alt_ws))))
##### END Foma target list #####

####### Build rules for the default set of fst's for ########
####### alternate writing systems:                   ########
define alt_orth_desc_analysers
analyser-gt-desc.$(1).tmp.%: analyser-raw-gt-desc.%            \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-number-string-tags.%        \
					filters/remove-usage-tags.%                \
					filters/remove-semantic-tags.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/spellrelax.$(1).compose.%      \
					orthography/$(DEFAULT_ORTH)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-semantic-tags.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"orthography/$(DEFAULT_ORTH)-to-$(1).compose.$$*\" \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			.o. @\"orthography/spellrelax.$(1).compose.$$*\"       \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

analyser-gt-desc.$(1).tmp.%: analyser-raw-gt-desc.%            \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-number-string-tags.%        \
					filters/remove-usage-tags.%                \
					filters/remove-semantic-tags.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/spellrelax.$(1).compose.%      \
					orthography/raw-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-semantic-tags.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"orthography/raw-to-$(1).compose.$$*\"           \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			.o. @\"orthography/spellrelax.$(1).compose.$$*\"       \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach alt_orth,$(ALT_ORTHS),$(eval $(call alt_orth_desc_analysers,$(alt_orth))))

define alt_orth_norm_analysers
analyser-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%            \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-variant-tags.%              \
					filters/remove-number-string-tags.%        \
					filters/remove-usage-tags.%                \
					filters/remove-error-strings.%             \
					filters/remove-semantic-tags.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/$(DEFAULT_ORTH)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-variant-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-semantic-tags.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-error-strings.$$*\"              \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"orthography/$(DEFAULT_ORTH)-to-$(1).compose.$$*\" \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

analyser-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%            \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-variant-tags.%              \
					filters/remove-number-string-tags.%        \
					filters/remove-usage-tags.%                \
					filters/remove-error-strings.%             \
					filters/remove-semantic-tags.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/raw-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-variant-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-semantic-tags.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-error-strings.$$*\"              \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"orthography/raw-to-$(1).compose.$$*\"           \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach alt_orth,$(ALT_ORTHS),$(eval $(call alt_orth_norm_analysers,$(alt_orth))))

define alt_orth_desc_generators
generator-gt-desc.$(1).tmp.%: analyser-raw-gt-desc.%           \
					filters/make-optional-transitivity-tags.%  \
					filters/make-optional-homonymy-tags.%      \
					filters/make-optional-hyph-tags.%          \
					filters/make-optional-variant-tags.%       \
					filters/make-optional-semantic-tags.%      \
					filters/make-optional-error-tags.%         \
					filters/make-optional-adv_comp-tags.%      \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-number-string-tags.%        \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-usage-tags.%                \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/$(DEFAULT_ORTH)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\"   \
			.o. @\"filters/make-optional-homonymy-tags.$$*\"       \
			.o. @\"filters/make-optional-hyph-tags.$$*\"           \
			.o. @\"filters/make-optional-variant-tags.$$*\"        \
			.o. @\"filters/make-optional-semantic-tags.$$*\"       \
			.o. @\"filters/make-optional-error-tags.$$*\"          \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"       \
			.o. @\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"orthography/$(DEFAULT_ORTH)-to-$(1).compose.$$*\" \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-gt-desc.$(1).tmp.%: analyser-raw-gt-desc.%           \
					filters/make-optional-transitivity-tags.%  \
					filters/make-optional-homonymy-tags.%      \
					filters/make-optional-hyph-tags.%          \
					filters/make-optional-variant-tags.%       \
					filters/make-optional-semantic-tags.%      \
					filters/make-optional-error-tags.%         \
					filters/make-optional-adv_comp-tags.%      \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-number-string-tags.%        \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-usage-tags.%                \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/raw-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\"   \
			.o. @\"filters/make-optional-homonymy-tags.$$*\"       \
			.o. @\"filters/make-optional-hyph-tags.$$*\"           \
			.o. @\"filters/make-optional-variant-tags.$$*\"        \
			.o. @\"filters/make-optional-semantic-tags.$$*\"       \
			.o. @\"filters/make-optional-error-tags.$$*\"          \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"       \
			.o. @\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"orthography/raw-to-$(1).compose.$$*\"           \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach alt_orth,$(ALT_ORTHS),$(eval $(call alt_orth_desc_generators,$(alt_orth))))

define alt_orth_norm_generators
generator-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%           \
					filters/make-optional-transitivity-tags.%  \
					filters/make-optional-homonymy-tags.%      \
					filters/make-optional-hyph-tags.%          \
					filters/make-optional-variant-tags.%       \
					filters/make-optional-semantic-tags.%      \
					filters/make-optional-adv_comp-tags.%      \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-number-string-tags.%        \
					filters/remove-usage-tags.%                \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-error-strings.%             \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/$(DEFAULT_ORTH)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\"   \
			.o. @\"filters/make-optional-homonymy-tags.$$*\"       \
			.o. @\"filters/make-optional-hyph-tags.$$*\"           \
			.o. @\"filters/make-optional-variant-tags.$$*\"        \
			.o. @\"filters/make-optional-semantic-tags.$$*\"       \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"       \
			.o. @\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-error-strings.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"orthography/$(DEFAULT_ORTH)-to-$(1).compose.$$*\" \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-gt-norm.$(1).tmp.%: analyser-raw-gt-desc.%           \
					filters/make-optional-transitivity-tags.%  \
					filters/make-optional-homonymy-tags.%      \
					filters/make-optional-hyph-tags.%          \
					filters/make-optional-variant-tags.%       \
					filters/make-optional-semantic-tags.%      \
					filters/make-optional-adv_comp-tags.%      \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-number-string-tags.%        \
					filters/remove-usage-tags.%                \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-error-strings.%             \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					orthography/raw-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\"   \
			.o. @\"filters/make-optional-homonymy-tags.$$*\"       \
			.o. @\"filters/make-optional-hyph-tags.$$*\"           \
			.o. @\"filters/make-optional-variant-tags.$$*\"        \
			.o. @\"filters/make-optional-semantic-tags.$$*\"       \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"       \
			.o. @\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-error-strings.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"orthography/raw-to-$(1).compose.$$*\" \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach alt_orth,$(ALT_ORTHS),$(eval $(call alt_orth_norm_generators,$(alt_orth))))

# morpher is a morph segmenting variant: taloautoissani -> talo#auto>i>ssa>ni
define alt_orth_morphers
morpher-gt-desc.$(1).tmp.%: analyser-raw-gt-desc.%         \
					 orthography/inituppercase.compose.%   \
					 orthography/spellrelax.compose.%      \
					filters/remove-hyphenation-marks.%     \
					filters/remove-infl_deriv-borders.%    \
					filters/remove-word-boundary.%         \
					orthography/$$(DEFAULT_ORTH)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
			 [ [@\"$$<\" \
				.o. @\"orthography/$$(DEFAULT_ORTH)-to-$(1).compose.$$*\" \
				.o. @\"orthography/inituppercase.compose.$$*\"            \
				.o. @\"orthography/spellrelax.compose.$$*\"  ].l          \
			.o. @\"filters/remove-hyphenation-marks.$$*\"                 \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"                \
			.o. @\"filters/remove-word-boundary.$$*\"  ]                  \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

morpher-gt-desc.$(1).tmp.%: analyser-raw-gt-desc.%         \
					 orthography/inituppercase.compose.%   \
					 orthography/spellrelax.compose.%      \
					filters/remove-hyphenation-marks.%     \
					filters/remove-infl_deriv-borders.%    \
					filters/remove-word-boundary.%         \
					orthography/raw-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
			 [ [@\"$$<\" \
				.o. @\"orthography/raw-to-$(1).compose.$$*\"     \
				.o. @\"orthography/inituppercase.compose.$$*\"   \
				.o. @\"orthography/spellrelax.compose.$$*\"  ].l \
			.o. @\"filters/remove-hyphenation-marks.$$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"       \
			.o. @\"filters/remove-word-boundary.$$*\"  ]         \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach alt_orth,$(ALT_ORTHS),$(eval $(call alt_orth_morphers,$(alt_orth))))
##### END Foma target list #####

####### Build rules for the default set of fst's for  ########
####### areal variation reflected in the orthography: ########
define dialect_fsts
analyser-gt-norm-dial_$(1).tmp.%: analyser-raw-gt-desc.%       \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-variant-tags.%              \
					filters/remove-number-string-tags.%        \
					filters/remove-usage-tags.%                \
					filters/remove-error-strings.%             \
					filters/remove-semantic-tags.%             \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					filters/remove-all_dialects_but_$(1)-strings.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-variant-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-semantic-tags.$$*\"              \
			.o. @\"filters/remove-error-strings.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-all_dialects_but_$(1)-strings.$$*\"\
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-gt-norm-dial_$(1).tmp.%: analyser-raw-gt-desc.%      \
					filters/make-optional-transitivity-tags.%  \
					filters/make-optional-homonymy-tags.%      \
					filters/make-optional-hyph-tags.%          \
					filters/make-optional-variant-tags.%       \
					filters/make-optional-semantic-tags.%      \
					filters/make-optional-adv_comp-tags.%      \
					filters/remove-area-tags.%                 \
					filters/remove-dialect-tags.%              \
					filters/remove-hyphenation-marks.%         \
					filters/remove-infl_deriv-borders.%        \
					filters/remove-word-boundary.%             \
					filters/remove-number-string-tags.%        \
					filters/remove-usage-tags.%                \
					filters/remove-orthography-tags.%          \
					filters/remove-Orth_IPA-strings.%          \
					filters/remove-orig_lang-tags.%            \
					filters/remove-error-strings.%             \
					filters/remove-Use_minusGC-tags.%          \
					filters/remove-Use_GC-strings.%            \
					filters/remove-Use_minus_PMatch-tags.%     \
					filters/remove-Use_PMatch-strings.%        \
					filters/remove-mwe-tags.%                  \
					filters/remove-all_dialects_but_$(1)-strings.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\"   \
			.o. @\"filters/make-optional-homonymy-tags.$$*\"       \
			.o. @\"filters/make-optional-hyph-tags.$$*\"           \
			.o. @\"filters/make-optional-variant-tags.$$*\"        \
			.o. @\"filters/make-optional-semantic-tags.$$*\"       \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"       \
			.o. @\"filters/remove-area-tags.$$*\"                  \
			.o. @\"filters/remove-dialect-tags.$$*\"               \
			.o. @\"filters/remove-number-string-tags.$$*\"         \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-error-strings.$$*\"              \
			.o. @\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"      \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"           \
			.o. @\"filters/remove-Use_GC-strings.$$*\"             \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"         \
			.o. @\"filters/remove-all_dialects_but_$(1)-strings.$$*\"\
			.o. @\"filters/remove-mwe-tags.$$*\"                   \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach dialect,$(DIALECTS),$(eval $(call dialect_fsts,$(dialect))))

# The grammar checker analyser is the same as the disambiguator analyser, but
# potentially/most likely with language-specific adaptations:
analyser-gramcheck-gt-desc.tmp.%: analyser-raw-gt-desc.%      \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-orig_lang-tags.%           \
					filters/remove-orthography-tags.%         \
					filters/remove-usage-tags.%               \
					filters/remove-Use_GC-tags.%              \
					filters/remove-Use_minusGC-strings.%      \
					filters/remove-Use_minus_PMatch-strings.% \
					filters/remove-Use_PMatch-tags.%          \
					filters/block-mwe-compounds.%             \
					orthography/inituppercase.compose.%       \
					orthography/spellrelax.compose.%          \
					$(GLT_DOWNCASE_FILTER)
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/remove-orig_lang-tags.$*\"           \
			.o. @\"filters/remove-usage-tags.$*\"               \
			.o. @\"filters/remove-orthography-tags.$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$*\"         \
			.o. @\"filters/remove-Use_minus_PMatch-strings.$*\" \
			.o. @\"filters/remove-Use_minusGC-strings.$*\"      \
			.o. @\"filters/remove-Use_GC-tags.$*\"              \
			.o. @\"filters/remove-Use_PMatch-tags.$*\"          \
			.o. @\"filters/block-mwe-compounds.$*\"             \
			.o. @\"$<\"                                         \
			    $(GLT_DOWNCASE_COMPOSE) \
			.o. @\"filters/remove-hyphenation-marks.$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$*\"       \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/inituppercase.compose.$*\"       \
			;\n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# And the same for alternate writing systems etc:
analyser-gramcheck-gt-desc.%.tmp.hfst: analyser-disamb-gt-desc.%.tmp.hfst
	$(AM_V_CP)cp -f $< $@

# The grammar checker generator is used to generate suggestions for the grammar
# checker, and must match the grammar checker analyser tag-wise. It is of course
# normative as opposed to the analysers.
generator-gramcheck-gt-norm.tmp.%: analyser-raw-gt-desc.%    \
					filters/make-optional-transitivity-tags.% \
					filters/make-optional-homonymy-tags.%     \
					filters/make-optional-hyph-tags.%         \
					filters/make-optional-variant-tags.%      \
					filters/make-optional-semantic-tags.%     \
					filters/make-optional-adv_comp-tags.%     \
					filters/make-optional-area-tags.%         \
					filters/make-optional-dialect-tags.%      \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-number-string-tags.%       \
					filters/remove-orig_lang-tags.%           \
					filters/remove-orthography-tags.%         \
					filters/remove-usage-tags.%               \
					filters/remove-error-strings.%            \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					$(GLT_DOWNCASE_FILTER)
	$(AM_V_XFST_TOOL)$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$*\" \
			.o. @\"filters/make-optional-homonymy-tags.$*\"     \
			.o. @\"filters/make-optional-hyph-tags.$*\"         \
			.o. @\"filters/make-optional-variant-tags.$*\"      \
			.o. @\"filters/make-optional-semantic-tags.$*\"     \
			.o. @\"filters/make-optional-adv_comp-tags.$*\"     \
			.o. @\"filters/make-optional-area-tags.$*\"         \
			.o. @\"filters/make-optional-dialect-tags.$*\"      \
			.o. @\"filters/remove-orig_lang-tags.$*\"           \
			.o. @\"filters/remove-number-string-tags.$*\"       \
			.o. @\"filters/remove-usage-tags.$*\"               \
			.o. @\"filters/remove-orthography-tags.$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$*\"         \
			.o. @\"filters/remove-error-strings.$*\"            \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$*\"       \
			.o. @\"filters/remove-mwe-tags.$*\"                 \
			.o. @\"$<\"                                         \
			    $(GLT_DOWNCASE_COMPOSE) \
			.o. @\"filters/remove-hyphenation-marks.$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$*\"       \
			.o. @\"filters/remove-word-boundary.$*\"            \
			; \n\
		 save stack $@\n\
		 quit\n" | $(XFST_TOOL)

# Additional target to support languages with alternative writing systems:
define alt_ws_gramchk_fsts
analyser-gramcheck-gt-desc.$(1).tmp.%: analyser-raw-gt-desc.%   \
					filters/remove-Orth_IPA-strings.%           \
					filters/remove-hyphenation-marks.%          \
					filters/remove-infl_deriv-borders.%         \
					filters/remove-word-boundary.%              \
					filters/remove-orig_lang-tags.%             \
					filters/remove-orthography-tags.%           \
					filters/remove-usage-tags.%                 \
					filters/remove-variant-tags.%               \
					filters/remove-Use_minusGC-strings.%        \
					filters/remove-Use_GC-tags.%                \
					filters/remove-Use_minus_PMatch-strings.%   \
					filters/remove-Use_PMatch-tags.%            \
					filters/block-mwe-compounds.%               \
					orthography/spellrelax.$(1).compose.%       \
					orthography/$(DEFAULT_WS)-to-$(1).compose.%
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-orig_lang-tags.$$*\"             \
			.o. @\"filters/remove-usage-tags.$$*\"                 \
			.o. @\"filters/remove-variant-tags.$$*\"               \
			.o. @\"filters/remove-orthography-tags.$$*\"           \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"           \
			.o. @\"filters/remove-Use_minus_PMatch-strings.$$*\"   \
			.o. @\"filters/remove-Use_minusGC-strings.$$*\"        \
			.o. @\"filters/remove-Use_GC-tags.$$*\"                \
			.o. @\"filters/remove-Use_PMatch-tags.$$*\"            \
			.o. @\"filters/block-mwe-compounds.$$*\"               \
			.o. @\"$$<\"                                           \
			.o. @\"filters/remove-hyphenation-marks.$$*\"          \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"         \
			.o. @\"filters/remove-word-boundary.$$*\"              \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/$(DEFAULT_WS)-to-$(1).compose.$$*\" \
			.o. @\"orthography/spellrelax.$(1).compose.$$*\"       \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-gramcheck-gt-norm.$(1).tmp.%: generator-raw-gt-desc.% \
					filters/make-optional-transitivity-tags.% \
					filters/make-optional-homonymy-tags.%     \
					filters/make-optional-hyph-tags.%         \
					filters/make-optional-variant-tags.%      \
					filters/make-optional-semantic-tags.%     \
					filters/make-optional-adv_comp-tags.%     \
					filters/make-optional-area-tags.%         \
					filters/make-optional-dialect-tags.%      \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-number-string-tags.%       \
					filters/remove-orig_lang-tags.%           \
					filters/remove-orthography-tags.%         \
					filters/remove-usage-tags.%               \
					filters/remove-error-strings.%            \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					orthography/$(DEFAULT_WS)-to-$(1).compose.% \
					$(GLT_DOWNCASE_FILTER)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\" \
			.o. @\"filters/make-optional-homonymy-tags.$$*\"     \
			.o. @\"filters/make-optional-hyph-tags.$$*\"         \
			.o. @\"filters/make-optional-variant-tags.$$*\"      \
			.o. @\"filters/make-optional-semantic-tags.$$*\"     \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"     \
			.o. @\"filters/make-optional-area-tags.$$*\"         \
			.o. @\"filters/make-optional-dialect-tags.$$*\"      \
			.o. @\"filters/remove-orig_lang-tags.$$*\"           \
			.o. @\"filters/remove-number-string-tags.$$*\"       \
			.o. @\"filters/remove-usage-tags.$$*\"               \
			.o. @\"filters/remove-orthography-tags.$$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"         \
			.o. @\"filters/remove-error-strings.$$*\"            \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"       \
			.o. @\"filters/remove-mwe-tags.$$*\"                 \
			.o. @\"$$<\"                                         \
			    $(GLT_DOWNCASE_COMPOSE_DEF) \
			.o. @\"filters/remove-hyphenation-marks.$$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"       \
			.o. @\"filters/remove-word-boundary.$$*\"            \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/$(DEFAULT_WS)-to-$(1).compose.$$*\" \
			; \n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach alt_ws,$(ALT_WSS),$(eval $(call alt_ws_gramchk_fsts,$(alt_ws))))

# Additional target to support languages with alternative orthographies:
define alt_orth_disamb_fst
analyser-gramcheck-gt-desc.$(1).tmp.%: analyser-raw-gt-desc.%    \
					filters/remove-hyphenation-marks.%           \
					filters/remove-infl_deriv-borders.%          \
					filters/remove-word-boundary.%               \
					filters/remove-orig_lang-tags.%              \
					filters/remove-orthography-tags.%            \
					filters/remove-usage-tags.%                  \
					filters/remove-variant-tags.%                \
					filters/remove-Orth_IPA-strings.%            \
					filters/remove-Use_minusGC-strings.%         \
					filters/remove-Use_GC-tags.%                 \
					filters/remove-Use_minus_PMatch-strings.%    \
					filters/remove-Use_PMatch-tags.%             \
					filters/block-mwe-compounds.%                \
					orthography/spellrelax.$(1).compose.%        \
					orthography/inituppercase.compose.%          \
					orthography/$(DEFAULT_ORTH)-to-$(1).compose.% \
					$(GLT_DOWNCASE_FILTER)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-orig_lang-tags.$$*\"               \
			.o. @\"filters/remove-orthography-tags.$$*\"             \
			.o. @\"filters/remove-usage-tags.$$*\"                   \
			.o. @\"filters/remove-variant-tags.$$*\"                 \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"             \
			.o. @\"filters/remove-Use_minus_PMatch-strings.$$*\"     \
			.o. @\"filters/remove-Use_minusGC-strings.$$*\"          \
			.o. @\"filters/remove-Use_GC-tags.$$*\"                  \
			.o. @\"filters/remove-Use_PMatch-tags.$$*\"              \
			.o. @\"filters/block-mwe-compounds.$$*\"                 \
			.o. @\"$$<\"                                             \
			    $(GLT_DOWNCASE_COMPOSE_DEF) \
			.o. @\"filters/remove-hyphenation-marks.$$*\"            \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"           \
			.o. @\"filters/remove-word-boundary.$$*\"                \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/$(DEFAULT_ORTH)-to-$(1).compose.$$*\" \
			.o. @\"orthography/spellrelax.$(1).compose.$$*\"         \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

# ... alternatively using a filter from RAW to target:
analyser-gramcheck-gt-desc.$(1).tmp.%: analyser-raw-gt-desc.%    \
					filters/remove-hyphenation-marks.%           \
					filters/remove-infl_deriv-borders.%          \
					filters/remove-word-boundary.%               \
					filters/remove-orig_lang-tags.%              \
					filters/remove-orthography-tags.%            \
					filters/remove-usage-tags.%                  \
					filters/remove-variant-tags.%                \
					filters/remove-Orth_IPA-strings.%            \
					filters/remove-Use_minusGC-strings.%         \
					filters/remove-Use_GC-tags.%                 \
					filters/remove-Use_minus_PMatch-strings.%    \
					filters/remove-Use_PMatch-tags.%             \
					filters/block-mwe-compounds.%                \
					orthography/spellrelax.$(1).compose.%        \
					orthography/inituppercase.compose.%          \
					orthography/raw-to-$(1).compose.%            \
					$(GLT_DOWNCASE_FILTER)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/remove-orig_lang-tags.$$*\"               \
			.o. @\"filters/remove-orthography-tags.$$*\"             \
			.o. @\"filters/remove-usage-tags.$$*\"                   \
			.o. @\"filters/remove-variant-tags.$$*\"                 \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"             \
			.o. @\"filters/remove-Use_minus_PMatch-strings.$$*\"     \
			.o. @\"filters/remove-Use_minusGC-strings.$$*\"          \
			.o. @\"filters/remove-Use_GC-tags.$$*\"                  \
			.o. @\"filters/remove-Use_PMatch-tags.$$*\"              \
			.o. @\"filters/block-mwe-compounds.$$*\"                 \
			.o. @\"$$<\"                                             \
			    $(GLT_DOWNCASE_COMPOSE_DEF) \
			.o. @\"filters/remove-hyphenation-marks.$$*\"            \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"           \
			.o. @\"filters/remove-word-boundary.$$*\"                \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/raw-to-$(1).compose.$$*\"             \
			.o. @\"orthography/spellrelax.$(1).compose.$$*\"         \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-gramcheck-gt-norm.$(1).tmp.%: generator-raw-gt-desc.% \
					filters/make-optional-transitivity-tags.% \
					filters/make-optional-homonymy-tags.%     \
					filters/make-optional-hyph-tags.%         \
					filters/make-optional-variant-tags.%      \
					filters/make-optional-semantic-tags.%     \
					filters/make-optional-adv_comp-tags.%     \
					filters/make-optional-area-tags.%         \
					filters/make-optional-dialect-tags.%      \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-number-string-tags.%       \
					filters/remove-orig_lang-tags.%           \
					filters/remove-orthography-tags.%         \
					filters/remove-usage-tags.%               \
					filters/remove-error-strings.%            \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					orthography/$(DEFAULT_ORTH)-to-$(1).compose.% \
					$(GLT_DOWNCASE_FILTER)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\" \
			.o. @\"filters/make-optional-homonymy-tags.$$*\"     \
			.o. @\"filters/make-optional-hyph-tags.$$*\"         \
			.o. @\"filters/make-optional-variant-tags.$$*\"      \
			.o. @\"filters/make-optional-semantic-tags.$$*\"     \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"     \
			.o. @\"filters/make-optional-area-tags.$$*\"         \
			.o. @\"filters/make-optional-dialect-tags.$$*\"      \
			.o. @\"filters/remove-orig_lang-tags.$$*\"           \
			.o. @\"filters/remove-number-string-tags.$$*\"       \
			.o. @\"filters/remove-usage-tags.$$*\"               \
			.o. @\"filters/remove-orthography-tags.$$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"         \
			.o. @\"filters/remove-error-strings.$$*\"            \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"       \
			.o. @\"filters/remove-mwe-tags.$$*\"                 \
			.o. @\"$$<\"                                         \
			    $(GLT_DOWNCASE_COMPOSE_DEF) \
			.o. @\"filters/remove-hyphenation-marks.$$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"       \
			.o. @\"filters/remove-word-boundary.$$*\"            \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/$(DEFAULT_ORTH)-to-$(1).compose.$$*\" \
			; \n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-gramcheck-gt-norm.$(1).tmp.%: generator-raw-gt-desc.% \
					filters/make-optional-transitivity-tags.% \
					filters/make-optional-homonymy-tags.%     \
					filters/make-optional-hyph-tags.%         \
					filters/make-optional-variant-tags.%      \
					filters/make-optional-semantic-tags.%     \
					filters/make-optional-adv_comp-tags.%     \
					filters/make-optional-area-tags.%         \
					filters/make-optional-dialect-tags.%      \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-number-string-tags.%       \
					filters/remove-orig_lang-tags.%           \
					filters/remove-orthography-tags.%         \
					filters/remove-usage-tags.%               \
					filters/remove-error-strings.%            \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					orthography/raw-to-$(1).compose.%         \
					$(GLT_DOWNCASE_FILTER)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\" \
			.o. @\"filters/make-optional-homonymy-tags.$$*\"     \
			.o. @\"filters/make-optional-hyph-tags.$$*\"         \
			.o. @\"filters/make-optional-variant-tags.$$*\"      \
			.o. @\"filters/make-optional-semantic-tags.$$*\"     \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"     \
			.o. @\"filters/make-optional-area-tags.$$*\"         \
			.o. @\"filters/make-optional-dialect-tags.$$*\"      \
			.o. @\"filters/remove-orig_lang-tags.$$*\"           \
			.o. @\"filters/remove-number-string-tags.$$*\"       \
			.o. @\"filters/remove-usage-tags.$$*\"               \
			.o. @\"filters/remove-orthography-tags.$$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"         \
			.o. @\"filters/remove-error-strings.$$*\"            \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"       \
			.o. @\"filters/remove-mwe-tags.$$*\"                 \
			.o. @\"$$<\"                                         \
			    $(GLT_DOWNCASE_COMPOSE_DEF) \
			.o. @\"filters/remove-hyphenation-marks.$$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"       \
			.o. @\"filters/remove-word-boundary.$$*\"            \
			; \n\
			define fst \n\
			set flag-is-epsilon ON\n\
			read regex fst \
			.o. @\"orthography/raw-to-$(1).compose.$$*\"        \
			; \n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach alt_orth,$(ALT_ORTHS),$(eval $(call alt_orth_disamb_fst,$(alt_orth))))

# Additional target to support languages with geographically bound orthographic
# variation (Area tags); only the normative generator is needed, the descriptive
# analyser will accept (and tag) all areas:
define area_gramchk_fsts
generator-gramcheck-gt-norm_$(1).tmp.%: generator-raw-gt-desc.% \
					filters/make-optional-transitivity-tags.% \
					filters/make-optional-homonymy-tags.%     \
					filters/make-optional-hyph-tags.%         \
					filters/make-optional-variant-tags.%      \
					filters/make-optional-semantic-tags.%     \
					filters/make-optional-adv_comp-tags.%     \
					filters/make-optional-area-tags.%         \
					filters/make-optional-dialect-tags.%      \
					filters/remove-Orth_IPA-strings.%         \
					filters/remove-hyphenation-marks.%        \
					filters/remove-infl_deriv-borders.%       \
					filters/remove-word-boundary.%            \
					filters/remove-number-string-tags.%       \
					filters/remove-orig_lang-tags.%           \
					filters/remove-orthography-tags.%         \
					filters/remove-usage-tags.%               \
					filters/remove-error-strings.%            \
					filters/remove-Use_minusGC-tags.%         \
					filters/remove-Use_GC-strings.%           \
					filters/remove-Use_minus_PMatch-tags.%    \
					filters/remove-Use_PMatch-strings.%       \
					filters/remove-all_areas_but_$(1)-strings.% \
					$(GLT_DOWNCASE_FILTER)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"filters/make-optional-transitivity-tags.$$*\" \
			.o. @\"filters/make-optional-homonymy-tags.$$*\"     \
			.o. @\"filters/make-optional-hyph-tags.$$*\"         \
			.o. @\"filters/make-optional-variant-tags.$$*\"      \
			.o. @\"filters/make-optional-semantic-tags.$$*\"     \
			.o. @\"filters/make-optional-adv_comp-tags.$$*\"     \
			.o. @\"filters/make-optional-area-tags.$$*\"         \
			.o. @\"filters/make-optional-dialect-tags.$$*\"      \
			.o. @\"filters/remove-orig_lang-tags.$$*\"           \
			.o. @\"filters/remove-number-string-tags.$$*\"       \
			.o. @\"filters/remove-usage-tags.$$*\"               \
			.o. @\"filters/remove-orthography-tags.$$*\"         \
			.o. @\"filters/remove-Orth_IPA-strings.$$*\"         \
			.o. @\"filters/remove-error-strings.$$*\"            \
			.o. @\"filters/remove-Use_minus_PMatch-tags.$$*\"    \
			.o. @\"filters/remove-Use_minusGC-tags.$$*\"         \
			.o. @\"filters/remove-Use_GC-strings.$$*\"           \
			.o. @\"filters/remove-Use_PMatch-strings.$$*\"       \
			.o. @\"filters/remove-all_areas_but_$(1)-strings.$$*\" \
			.o. @\"filters/remove-mwe-tags.$$*\"                 \
			.o. @\"$$<\"                                         \
			    $(GLT_DOWNCASE_COMPOSE_DEF) \
			.o. @\"filters/remove-hyphenation-marks.$$*\"        \
			.o. @\"filters/remove-infl_deriv-borders.$$*\"       \
			.o. @\"filters/remove-word-boundary.$$*\"            \
			; \n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach area,$(AREAS),$(eval $(call area_gramchk_fsts,$(area))))

# Default fallback processing for the grammarchecker fst's:
define giella_gramcheck_analysers
analyser-gramcheck%.$(1): analyser-gramcheck%.tmp.$(1) \
						  filters/remove-word-boundary.$(1)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
				@\"$$<\"                                             \
			.o. @\"filters/remove-word-boundary.$(1)\"               \
			;\n\
		 $$(INVERT_HFST)\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)

generator-gramcheck%.$(1): generator-gramcheck%.tmp.$(1) \
						  filters/remove-word-boundary.$(1)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "\
		 load stack $$<\n\
		 $$(INVERT_XFST)$$(INVERT_FOMA)\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach fst,hfst xfst foma,$(eval $(call giella_gramcheck_analysers,$(fst))))

# We need a special target for regexes that must be compiled in the selected fst
# format while in the same dir as regexes that should be compiled using the
# openfst format. These are typically for spellers and other weighted utilities:
$(SELECTED_FORMAT_REGEX_TARGETS): \
%.hfst: %.regex
	$(AM_V_RGX2FST)"$(HFST_REGEXP2FST)" $(HFST_FLAGS) $(HFST_FORMAT) \
		$(HFST_REGEXP2FST_FLAGS) $(MORE_VERBOSITY) -S $< -o $@

# We need a special target for regexes that must be compiled in the openfst
# format while in the same dir as regexes that can be compiled using the chosen
# format. These are typically for spellers and other weighted utilities:
$(OFST_REGEX_TARGETS): \
%.hfst: %.regex
	$(AM_V_RGX2FST)"$(HFST_REGEXP2FST)" $(HFST_FLAGS) \
	   --format=openfst-tropical \
		$(HFST_REGEXP2FST_FLAGS) $(MORE_VERBOSITY) -S -i $< -o $@

# By default, and for Xerox compatibility, all regexes are semicolon separated
# (that is the '-S' flag):
.regex.hfst:
	$(AM_V_RGX2FST)"$(HFST_REGEXP2FST)" $(HFST_FLAGS) $(HFST_FORMAT) \
		$(HFST_REGEXP2FST_FLAGS) $(MORE_VERBOSITY) -S $< -o $@

####### Xerox build rules: #######

# xfst needs a script to read regex file
.regex.xfst:
	$(AM_V_XFST)$(PRINTF) "read regex @re\"$<\";\nsave stack $@\nquit\n" \
		| "$(XFST)" $(XFSTFLAGS) $(VERBOSITY)

####### Foma build rules: #######

# foma needs a script to read regex file
.regex.foma:
	$(AM_V_FOMA)$(PRINTF) "read regex @re\"$<\";\nsave stack $@\nquit\n" \
		| "$(FOMA)" $(FOMAFLAGS) $(VERBOSITY)

# vim: set ft=automake:

# The fst used for composition should be taken as is, just copy:
%.compose.hfst: %.hfst
	$(AM_V_CP)cp $< $@

# Lookup in Hfst is done in the same direction as it is written, just copy:
%.lookup.hfst: %.hfst
	$(AM_V_CP)cp $< $@

# We also want a generic build rule for making optimised lookup hfst's:
%.hfstol: %.hfst
	$(AM_V_FST2FST)"$(HFST_FST2FST)" $(HFSTFLAGS) -w -i $< -o $@

####### Xerox build rules: #######

# The fst used for composition should be taken as is, just copy:
%.compose.xfst: %.xfst
	$(AM_V_CP)cp $< $@

# The lookup variant of the Xerox fst needs to be inverted, since Xerox turns
# the fst upside down / backwards when doing lookup:
%.lookup.xfst: %.xfst
	$(AM_V_XFST)"$(XFST)" $(VERBOSITY) \
			-e "load stack < $<" \
			-e "invert net" \
			-e "save stack $@ " \
			-stop

####### Foma build rules: #######

# The fst used for composition should be taken as is, just copy:
%.compose.foma: %.foma
	$(AM_V_CP)cp $< $@

# The lookup variant of the Xerox fst needs to be inverted, since Xerox turns
# the fst upside down / backwards when doing lookup:
%.lookup.foma: %.foma
	$(AM_V_FOMA)"$(FOMA)" $(VERBOSITY) \
			-e "load stack $<" \
			-e "invert net" \
			-e "save stack $@ " \
			-s

# vim: set ft=automake:

####### HFST build rules: ########
%.hfst: %.xfscript
	$(AM_V_HXFST)printf "\n\nsave stack $@\nquit\n" | cat $< - \
		| "$(HFST_XFST)" -p $(MORE_VERBOSITY) $(HFST_FORMAT)

####### Xerox build rules: #######
%.xfst: %.xfscript
	$(AM_V_XFST)"$(XFST)" $(VERBOSITY) -l $< -e "save stack $@" -stop

####### Foma build rules: #######
%.foma: %.xfscript
	$(AM_V_FOMA)"$(FOMA)" $(VERBOSITY) -l $< -e "save stack $@" -s

# Pattern variables to choose tools depending on which toolset we build for:
%.hfst : XFST_TOOL      = $(HFST_XFST) -p $(MORE_VERBOSITY) $(HFST_FORMAT)
%.xfst : XFST_TOOL      = $(XFST) $(VERBOSITY)
%.foma : XFST_TOOL      = $(FOMA) $(VERBOSITY)

%.hfst : AM_V_XFST_TOOL = $(AM_V_HXFST)
%.xfst : AM_V_XFST_TOOL = $(AM_V_XFST)
%.foma : AM_V_XFST_TOOL = $(AM_V_FOMA)

%.hfst : INVERT_HFST = invert net\n
%.xfst : INVERT_XFST = invert net\n
%.foma : INVERT_FOMA = invert net\n

# vim: set ft=automake:

# vim: set ft=automake:

##################################################################
#### END: Add local processing instructions ABOVE this line ######
##################################################################

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
